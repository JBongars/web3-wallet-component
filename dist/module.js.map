{"mappings":"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","sources":["src/index.ts","src/types.ts","src/errors.ts","src/ethereum/index.ts","src/ethereum/metamask/index.ts","src/containers/index.ts","src/containers/window.ts","src/utils/HookRouter.ts","src/ethereum/Ethereum.ts","src/algorand/index.ts","src/algorand/myalgo/index.ts","src/config/constants.ts","src/algorand/Algorand.ts"],"sourcesContent":["export * from \"./types\";\nexport * from \"./errors\";\nexport * from \"./ethereum\";\nexport * from \"./algorand\";\nexport * from \"./containers\";\n","import { MyAlgo } from \"./algorand\";\nimport { Metamask } from \"./ethereum\";\n\ntype ChainID = 2 | 8;\n\nenum WALLET_STATUS {\n  OK,\n  LOGIN_ERROR,\n  WALLET_ERROR,\n  EXTENSION_NOT_FOUND,\n  ACCOUNT_NOT_FOUND,\n}\n\nenum WALLET_HOOK {\n  ACCOUNT_ON_CHANGE,\n}\n\nconst WALLETS = {\n  MYALGO: \"MYALGO\",\n  METAMASK: \"METAMASK\",\n} as const;\n\ninterface useWallets {\n  use(walletName: \"MYALGO\"): MyAlgo;\n  use(walletName: \"METAMASK\"): Metamask;\n}\n\ntype Signer<T, S> = (transactions: T[]) => Promise<S[]>;\n\ninterface WalletInterface<T> {\n  init: () => Promise<WALLET_STATUS>;\n  signIn: () => Promise<WALLET_STATUS>;\n  signOut: () => Promise<WALLET_STATUS>;\n  getSigner: () => Promise<Signer<any, any>>;\n  getBalance: () => Promise<string>;\n  getAssets: () => Promise<unknown[]>;\n  getIsConnected: () => boolean;\n  getIsWalletInstalled: () => boolean;\n  getPrimaryAccount: () => unknown;\n  getAccounts: () => unknown[];\n  fetchCurrentChainID: () => Promise<number>;\n  onAccountChange: (cb: (accountId: unknown) => void | Promise<void>) => void;\n  toJSON: () => T;\n}\n\nexport { WALLETS, WalletInterface, WALLET_STATUS, WALLET_HOOK };\nexport type { ChainID, Signer, useWallets };\n","class NotImplementedError extends Error {\n  constructor(message: string = \"NotImplementedError\") {\n    super(message);\n    this.name = \"NotImplementedError\";\n  }\n}\n\nclass WalletNotInstalledError extends Error {\n  constructor(message: string = \"WalletNotInstalledError\") {\n    super(message);\n    this.name = \"WalletNotInstalledError\";\n  }\n}\n\nclass WalletNotConnectedError extends Error {\n  constructor(message: string = \"WalletNotConnectedError\") {\n    super(message);\n    this.name = \"WalletNotConnectedError\";\n  }\n}\n\nclass HookNotAvailableError extends Error {\n  constructor(message: string = \"HookNotAvailableError\") {\n    super(message);\n    this.name = \"HookNotAvailableError\";\n  }\n}\n\nexport {\n  NotImplementedError,\n  WalletNotInstalledError,\n  WalletNotConnectedError,\n  HookNotAvailableError,\n};\n","export * from \"./metamask\";\nexport * from \"./Ethereum\";\n","import {\n  Signer,\n  WALLET_STATUS,\n  WalletInterface,\n  WALLET_HOOK,\n} from \"../../types\";\nimport { MetamaskAsset, MetamaskSigner, MetamaskState } from \"./types\";\nimport { ethers } from \"ethers\";\nimport {\n  TransactionRequest,\n  TransactionResponse,\n} from \"@ethersproject/abstract-provider\";\nimport { useWindow } from \"../../containers\";\nimport {\n  NotImplementedError,\n  WalletNotConnectedError,\n  WalletNotInstalledError,\n} from \"~/src/errors\";\nimport HookRouter from \"~/src/utils/HookRouter\";\n\nconst initialState: Readonly<MetamaskState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass Metamask implements WalletInterface<MetamaskState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n  ]);\n  public state: MetamaskState;\n  public provider?: ethers.providers.Web3Provider;\n\n  constructor(state?: MetamaskState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n  }\n\n  private enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    this.provider = await this.getProvider();\n\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(): Promise<WALLET_STATUS> {\n    const provider = await this.getProvider();\n    this.state.accounts = await provider.send(\"eth_requestAccounts\", []);\n    this.state.isConnected = this.state.accounts.length > 0;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this.enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<MetamaskSigner> {\n    return async (\n      transactions: TransactionRequest[]\n    ): Promise<TransactionResponse[]> => {\n      this.enforceIsConnected();\n\n      const provider = this.provider || (await this.getProvider());\n      const transactionResponse = await provider\n        .getSigner()\n        .sendTransaction(transactions[0]);\n\n      return [transactionResponse];\n    };\n  }\n\n  public async getBalance(): Promise<string> {\n    this.enforceIsConnected();\n\n    const provider = this.provider || (await this.getProvider());\n    const balance = await provider.getBalance(this.state.accounts[0]);\n    return balance.toString();\n  }\n\n  public async getAssets(): Promise<MetamaskAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getIsWalletInstalled(): boolean {\n    const ethereum = useWindow(\n      async (windowObject) => (windowObject as any).ethereum\n    ) as any;\n\n    return ethereum !== null;\n  }\n\n  public getPrimaryAccount(): string {\n    this.enforceIsConnected();\n\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): string[] {\n    this.enforceIsConnected();\n\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<number> {\n    this.enforceIsConnected();\n\n    const provider: ethers.providers.Web3Provider = await this.getProvider();\n    const chainId: number = await provider.send(\"eth_chainId\", []);\n\n    return chainId;\n  }\n\n  public onAccountChange(cb: (accountId: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      () => {\n        return cb(this.getPrimaryAccount());\n      }\n    );\n  }\n\n  public toJSON(): MetamaskState {\n    return this.state;\n  }\n\n  public async mountEventListeners(\n    callback?: (accounts: string[]) => Promise<unknown>\n  ) {\n    const provider = await this.getProvider();\n\n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.state.accounts = accounts;\n\n      if (callback) {\n        return callback(accounts);\n      }\n    });\n  }\n\n  public async unmountEventListeners(callback?: () => Promise<unknown>) {\n    const provider = await this.getProvider();\n\n    provider.removeListener(\"accountsChanged\", async () => {\n      if (callback) {\n        return callback();\n      }\n    });\n  }\n\n  public async getProvider(): Promise<ethers.providers.Web3Provider> {\n    const ethereum = (await useWindow(\n      async (windowObject) => (windowObject as any).ethereum\n    )) as any;\n\n    if (ethereum === null) {\n      throw new WalletNotInstalledError();\n    }\n\n    return new ethers.providers.Web3Provider(ethereum);\n  }\n}\n\nexport { Metamask };\n","export * from \"./window\";\n","const useWindow = <T>(cb: (windowObject: unknown) => T): T | null => {\n  if (Object.keys(globalThis).includes(\"window\")) {\n    return cb(globalThis.window);\n  } else {\n    return null;\n  }\n};\n\nexport { useWindow };\n","import { HookNotAvailableError } from \"../errors\";\nimport { WALLET_HOOK } from \"../types\";\n\nclass HookRouter {\n  private availableHooks: WALLET_HOOK[];\n  private hooks: Map<WALLET_HOOK, Map<Symbol, Function>>;\n\n  constructor(hooks: WALLET_HOOK[]) {\n    this.hooks = new Map();\n    this.availableHooks = hooks;\n\n    this.resetAllHooks();\n  }\n\n  private checkIfValidHook(hook: WALLET_HOOK) {\n    if (!this.hooks.has(hook)) {\n      throw new HookNotAvailableError();\n    }\n  }\n\n  public getAvailableHooks() {\n    return [...this.availableHooks];\n  }\n\n  public resetHook(hook: WALLET_HOOK) {\n    this.checkIfValidHook(hook);\n\n    this.hooks.delete(hook);\n    this.hooks.set(hook, new Map());\n  }\n\n  public resetAllHooks() {\n    this.availableHooks.forEach((hook) => {\n      this.hooks.set(hook, new Map());\n    });\n  }\n\n  public registerCallback(hook: WALLET_HOOK, cb: Function) {\n    this.checkIfValidHook(hook);\n\n    const id = Symbol();\n    this.hooks.get(hook)?.set(id, cb);\n\n    return id;\n  }\n\n  public deregisterCallback(hook: WALLET_HOOK, id: Symbol) {\n    this.checkIfValidHook(hook);\n\n    this.hooks.get(hook)?.delete(id);\n  }\n\n  public applyHooks(hooks: WALLET_HOOK[]) {\n    const callbacksToInvoke: Function[] = [];\n\n    hooks.forEach((hook) => {\n      this.hooks\n        .get(hook)\n        ?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n    });\n\n    Promise.all(callbacksToInvoke.map((fn) => fn()));\n  }\n}\n\nexport default HookRouter;\n","import { Metamask } from \"./metamask\";\nimport { MetamaskState } from \"./metamask/types\";\n\ntype EthereumState = {\n  metaMask?: MetamaskState;\n};\n\nclass Ethereum {\n  public metaMask: Metamask;\n\n  constructor(data?: EthereumState) {\n    this.metaMask = new Metamask(data?.metaMask);\n  }\n}\n\nexport type { Ethereum, EthereumState };\n","export * from \"./myalgo\";\nexport * from \"./Algorand\";\n","import {\n  SignedTx,\n  AlgorandTxn,\n  EncodedTransaction,\n  Accounts,\n} from \"@randlabs/myalgo-connect\";\nimport {\n  Signer,\n  WALLET_STATUS,\n  WalletInterface,\n  WALLET_HOOK,\n} from \"./../../types\";\nimport { MyAlgoAsset, MyAlgoSigner, MyAlgoState } from \"./types\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { NotImplementedError, WalletNotConnectedError } from \"~/src/errors\";\nimport { CHAINS } from \"~/src/config/constants\";\nimport HookRouter from \"~/src/utils/HookRouter\";\n\nconst initialState: Readonly<MyAlgoState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass MyAlgo implements WalletInterface<MyAlgoState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n  ]);\n  public state: MyAlgoState;\n  private provider: MyAlgoConnect | undefined;\n\n  constructor(state?: MyAlgoState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n  }\n\n  private enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(): Promise<WALLET_STATUS> {\n    const myAlgoConnect = this.getProvider();\n\n    this.state.accounts = await myAlgoConnect.connect();\n    this.state.isConnected = this.state.accounts.length > 0;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this.enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<MyAlgoSigner> {\n    return async (\n      transactions: AlgorandTxn[] | EncodedTransaction[]\n    ): Promise<SignedTx[]> => {\n      this.enforceIsConnected();\n\n      const myAlgoConnect = this.getProvider();\n      const signedTx = await myAlgoConnect.signTransaction(transactions);\n\n      return signedTx;\n    };\n  }\n\n  public async getBalance(): Promise<string> {\n    throw new NotImplementedError();\n  }\n\n  public async getAssets(): Promise<MyAlgoAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsWalletInstalled(): boolean {\n    return true; // wallet is web only so is always installed\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getPrimaryAccount(): Accounts {\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): Accounts[] {\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<number> {\n    return CHAINS.CHAIN_ID_ALGORAND;\n  }\n\n  public onAccountChange(cb: (accountId: Accounts) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      () => {\n        return cb(this.getPrimaryAccount());\n      }\n    );\n  }\n\n  public toJSON(): MyAlgoState {\n    return this.state;\n  }\n\n  public getProvider(): MyAlgoConnect {\n    if (this.provider instanceof MyAlgoConnect) {\n      return this.provider;\n    }\n\n    this.provider = new MyAlgoConnect();\n    return this.provider;\n  }\n}\n\nexport { MyAlgo };\n","import { ChainID } from \"~/src/types\";\n\nconst CHAINS = {\n  CHAIN_ID_ALGORAND: 8 as ChainID,\n  CHAIN_ID_ETHEREUM: 2 as ChainID,\n};\n\nexport { CHAINS };\n","import { MyAlgo } from \"./myalgo\";\nimport { MyAlgoState } from \"./myalgo/types\";\n\ntype AlgorandState = {\n  myAlgo?: MyAlgoState;\n};\n\nclass Algorand {\n  public myAlgo: MyAlgo;\n\n  constructor(data?: AlgorandState) {\n    this.myAlgo = new MyAlgo(data?.myAlgo);\n  }\n}\n\nexport { Algorand, AlgorandState };\n"],"names":[],"version":3,"file":"module.js.map"}