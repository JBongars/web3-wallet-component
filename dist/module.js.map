{"mappings":"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","sources":["src/index.ts","src/types.ts","src/errors.ts","src/ethereum/index.ts","src/ethereum/metamask/index.ts","src/containers/index.ts","src/containers/window.ts","src/utils/HookRouter/HookRouter.ts","src/utils/HookRouter/types.ts","src/ethereum/metamask/chains.ts","src/ethereum/Ethereum.ts","src/algorand/index.ts","src/algorand/myalgo/index.ts","src/algorand/Algorand.ts"],"sourcesContent":["export * from \"./types\";\nexport * from \"./errors\";\nexport * from \"./ethereum\";\nexport * from \"./algorand\";\nexport * from \"./containers\";\n","import { MyAlgo } from \"./algorand\";\nimport { Metamask } from \"./ethereum\";\nimport { HookEvent, WALLET_STATUS } from \"./utils/HookRouter/types\";\n\ndeclare type ChainID =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 10001;\n\nconst WALLETS = {\n  MYALGO: \"MYALGO\",\n  METAMASK: \"METAMASK\",\n} as const;\n\ninterface useWallets {\n  use(walletName: \"MYALGO\"): MyAlgo;\n  use(walletName: \"METAMASK\"): Metamask;\n}\n\ntype Signer<T, S> = (transactions: T[]) => Promise<S[]>;\n\ninterface WalletInterface<T> {\n  init: () => Promise<WALLET_STATUS>;\n  signIn: () => Promise<WALLET_STATUS>;\n  signOut: () => Promise<WALLET_STATUS>;\n  getSigner: () => Promise<Signer<any, any>>;\n  getBalance: () => Promise<string>;\n  getAssets: () => Promise<unknown[]>;\n  getIsConnected: () => boolean;\n  getIsWalletInstalled: () => boolean;\n  getPrimaryAccount: () => unknown;\n  getAccounts: () => unknown[];\n  fetchCurrentChainID: () => Promise<string>;\n  onAccountChange: (\n    cb: (accounts: unknown) => void | Promise<void>\n  ) => HookEvent;\n  onChainChange: (cb: (chainId: string) => void | Promise<void>) => HookEvent;\n  onBlockAdded: (cb: (block: unknown) => void | Promise<void>) => HookEvent;\n  toJSON: () => T;\n}\n\nexport { WALLETS, WalletInterface };\nexport type { ChainID, Signer, useWallets };\n","class NotImplementedError extends Error {\n  constructor(message: string = \"NotImplementedError\") {\n    super(message);\n    this.name = \"NotImplementedError\";\n  }\n}\n\nclass WalletNotInstalledError extends Error {\n  constructor(message: string = \"WalletNotInstalledError\") {\n    super(message);\n    this.name = \"WalletNotInstalledError\";\n  }\n}\n\nclass WalletNotConnectedError extends Error {\n  constructor(message: string = \"WalletNotConnectedError\") {\n    super(message);\n    this.name = \"WalletNotConnectedError\";\n  }\n}\n\nclass HookNotAvailableError extends Error {\n  constructor(message: string = \"HookNotAvailableError\") {\n    super(message);\n    this.name = \"HookNotAvailableError\";\n  }\n}\n\nexport {\n  NotImplementedError,\n  WalletNotInstalledError,\n  WalletNotConnectedError,\n  HookNotAvailableError,\n};\n","export * from \"./metamask\";\nexport * from \"./Ethereum\";\n","import { WalletInterface, ChainID } from \"../../types\";\nimport {\n  MetamaskAsset,\n  MetamaskChainConfig,\n  MetamaskSigner,\n  MetamaskState,\n} from \"./types\";\nimport { ethers } from \"ethers\";\nimport {\n  TransactionRequest,\n  TransactionResponse,\n} from \"@ethersproject/abstract-provider\";\nimport { useWindow } from \"../../containers\";\nimport {\n  NotImplementedError,\n  WalletNotConnectedError,\n  WalletNotInstalledError,\n} from \"~/src/errors\";\nimport HookRouter from \"~/src/utils/HookRouter/HookRouter\";\nimport { WALLET_HOOK, WALLET_STATUS } from \"~/src/utils/HookRouter/types\";\nimport { getChainConfig } from \"./chains\";\n\nconst initialState: Readonly<MetamaskState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass Metamask implements WalletInterface<MetamaskState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.CHAIN_ON_CHANGE,\n    WALLET_HOOK.CHAIN_ON_DISCONNECT,\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n    WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n    WALLET_HOOK.NEW_BLOCK,\n  ]);\n  private chain: string | null = null;\n  public state: MetamaskState;\n  public provider?: ethers.providers.Web3Provider;\n\n  constructor(state?: MetamaskState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n  }\n\n  private async _getProvider(): Promise<ethers.providers.Web3Provider> {\n    const ethereum = (await useWindow(\n      async (windowObject) => (windowObject as any).ethereum\n    )) as any;\n\n    if (!Boolean(ethereum)) {\n      throw new WalletNotInstalledError();\n    }\n\n    return new ethers.providers.Web3Provider(ethereum);\n  }\n\n  private _enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  private async _enforceChain(): Promise<void> {\n    if (this.chain === null) return;\n\n    const provider = await this._getProvider();\n    const currentChain: string = await provider.send(\"eth_chainId\", []);\n\n    if (currentChain !== this.chain) {\n      throw new Error(\n        `Chain has changed to ${currentChain} when it should be ${this.chain}`\n      );\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    this.provider = await this._getProvider();\n\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(): Promise<WALLET_STATUS> {\n    const provider = await this._getProvider();\n    this.state.accounts = await provider.send(\"eth_requestAccounts\", []);\n    this.state.isConnected = this.state.accounts.length > 0;\n\n    this.hookRouter.applyHookWithArgs(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      this.state.accounts\n    );\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this._enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<MetamaskSigner> {\n    return async (\n      transactions: TransactionRequest[]\n    ): Promise<TransactionResponse[]> => {\n      this._enforceChain();\n      this._enforceIsConnected();\n\n      const provider = this.provider || (await this._getProvider());\n      const transactionResponse = await provider\n        .getSigner()\n        .sendTransaction(transactions[0]);\n\n      return [transactionResponse];\n    };\n  }\n\n  public async getBalance(): Promise<string> {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    const provider = this.provider || (await this._getProvider());\n    const balance = await provider.getBalance(this.state.accounts[0]);\n    return balance.toString();\n  }\n\n  public async getAssets(): Promise<MetamaskAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getIsWalletInstalled(): boolean {\n    const ethereum = useWindow(\n      (windowObject) => (windowObject as any).ethereum\n    ) as any;\n\n    return Boolean(ethereum);\n  }\n\n  public getPrimaryAccount(): string {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): string[] {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<string> {\n    const provider: ethers.providers.Web3Provider = await this._getProvider();\n    const chainId = await provider.send(\"eth_chainId\", []);\n\n    return chainId;\n  }\n\n  public async addChainToWallet(\n    chainConfig: MetamaskChainConfig\n  ): Promise<void> {\n    return useWindow(async (window: any) =>\n      window.ethereum?.request({\n        method: \"wallet_addEthereumChain\",\n        params: [chainConfig],\n      })\n    );\n  }\n\n  public async switchChainFromWallet(chain: number) {\n    const ethereum = useWindow((window: any) => window.ethereum);\n    if (ethereum.networkVersion !== chain) {\n      try {\n        await ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: `0x${chain}` }],\n        });\n      } catch (err) {\n        if (err && (err as { code: number }).code === 4902) {\n          const chainConfig = getChainConfig(chain);\n          await this.addChainToWallet(chainConfig);\n        } else {\n          throw err;\n        }\n      }\n    }\n  }\n\n  public async forceCurrentChainID(chain: number): Promise<void> {\n    if (this.chain !== null && this.chain !== `0x${chain}`) {\n      throw new Error(\n        `Cannot force chain to be 0x${chain} because it is already forced to be 0x${this.chain}`\n      );\n    }\n\n    this.chain = `0x${chain}`;\n    this.switchChainFromWallet(chain);\n  }\n\n  public onAccountChange(cb: (accounts: string[]) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n  }\n\n  public onChainChange(cb: (chain: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n  }\n\n  public onAccountDisconnect(cb: () => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n      cb\n    );\n  }\n\n  public onChainDisconnect(cb: () => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.CHAIN_ON_DISCONNECT,\n      cb\n    );\n  }\n\n  public onBlockAdded(cb: (newBlock: number) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.NEW_BLOCK,\n      (block: number) => {\n        return cb(block);\n      }\n    );\n  }\n\n  public toJSON(): MetamaskState {\n    return this.state;\n  }\n\n  public async mountEventListeners() {\n    const provider = await this._getProvider();\n    if (typeof window !== \"undefined\" && \"ethereum\" in window) {\n      const ethereum = useWindow((window: any) => window.ethereum);\n      if(ethereum.on) {\n        ethereum.on(\"accountsChanged\", async (accounts: string[]) => {\n          this.state.accounts = accounts;\n          if (accounts.length === 0) {\n            await this.signOut();\n          } else {\n            this.hookRouter.applyHookWithArgs(\n              WALLET_HOOK.ACCOUNT_ON_CHANGE,\n              accounts\n            );\n          }\n        });\n    \n        ethereum.on(\"chainChanged\", async (chainId: string) => {\n          this.hookRouter.applyHookWithArgs(WALLET_HOOK.CHAIN_ON_CHANGE, chainId);\n        });\n    \n        ethereum.on(\"disconnect\", async (err: Error) => {\n          this.hookRouter.applyHooks([WALLET_HOOK.CHAIN_ON_DISCONNECT]);\n        });\n      }\n    }\n\n    provider.on(\"block\", (block: number) => {\n      this.hookRouter.applyHookWithArgs(WALLET_HOOK.NEW_BLOCK, block);\n    });\n  }\n\n  public async unmountEventListeners() {\n    const provider = await this._getProvider();\n    provider.removeAllListeners();\n  }\n\n  public async getProvider(): Promise<ethers.providers.Web3Provider> {\n    await this._enforceChain();\n\n    return this._getProvider();\n  }\n}\n\nexport { Metamask };\n","export * from \"./window\";\n","const useWindow = <T>(cb: (windowObject: unknown) => T): T | null => {\n  if (Object.keys(globalThis).includes(\"window\")) {\n    return cb(globalThis.window);\n  } else {\n    return null;\n  }\n};\n\nexport { useWindow };\n","import { HookNotAvailableError } from \"../../errors\";\nimport { HookEvent, WALLET_HOOK } from \"./types\";\n\nclass HookRouter {\n  private availableHooks: WALLET_HOOK[];\n  private hooks: Map<WALLET_HOOK, Map<Symbol, Function>>;\n\n  constructor(hooks: WALLET_HOOK[]) {\n    this.hooks = new Map();\n    this.availableHooks = hooks;\n\n    this.resetAllHooks();\n  }\n\n  private checkIfValidHook(hook: WALLET_HOOK) {\n    if (!this.hooks.has(hook)) {\n      throw new HookNotAvailableError();\n    }\n  }\n\n  public getAvailableHooks() {\n    return [...this.availableHooks];\n  }\n\n  public resetHook(hook: WALLET_HOOK) {\n    this.checkIfValidHook(hook);\n\n    this.hooks.delete(hook);\n    this.hooks.set(hook, new Map());\n  }\n\n  public resetAllHooks() {\n    this.availableHooks.forEach((hook) => {\n      this.hooks.set(hook, new Map());\n    });\n  }\n\n  public registerCallback(hook: WALLET_HOOK, cb: Function): HookEvent {\n    this.checkIfValidHook(hook);\n\n    const id = Symbol();\n    this.hooks.get(hook)?.set(id, cb);\n\n    return {\n      id,\n      destroy: () => this.deregisterCallback(hook, id),\n    };\n  }\n\n  public deregisterCallback(hook: WALLET_HOOK, id: Symbol) {\n    this.checkIfValidHook(hook);\n\n    this.hooks.get(hook)?.delete(id);\n  }\n\n  public async applyHooks(hooks: WALLET_HOOK[]): Promise<void> {\n    const callbacksToInvoke: Function[] = [];\n\n    hooks.forEach((hook) => {\n      this.hooks\n        .get(hook)\n        ?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n    });\n\n    await Promise.all(callbacksToInvoke.map((fn) => fn()));\n  }\n\n  public async applyHookWithArgs(\n    hook: WALLET_HOOK,\n    ...args: any[]\n  ): Promise<void> {\n    const callbacksToInvoke: Function[] = [];\n\n    this.hooks.get(hook)?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n\n    await Promise.all(callbacksToInvoke.map((fn) => fn(...args)));\n  }\n}\n\nexport default HookRouter;\n","enum WALLET_STATUS {\n  OK,\n  LOGIN_ERROR,\n  WALLET_ERROR,\n  EXTENSION_NOT_FOUND,\n  ACCOUNT_NOT_FOUND,\n}\n\nenum WALLET_HOOK {\n  CHAIN_ON_CHANGE,\n  CHAIN_ON_DISCONNECT,\n  ACCOUNT_ON_CHANGE,\n  ACCOUNT_ON_DISCONNECT,\n  NEW_BLOCK,\n}\n\ntype HookEvent = {\n  destroy: () => void;\n  id: Symbol;\n};\n\nexport { WALLET_HOOK, WALLET_STATUS };\nexport type { HookEvent };\n","import { MetamaskChainConfig } from \"./types\";\n\nconst rinkebyEth: MetamaskChainConfig = {\n  chainName: \"Rinkeby Test Network\",\n  chainId: \"0x4\",\n  nativeCurrency: { name: \"ETH\", decimals: 18, symbol: \"ETH\" },\n  rpcUrls: [\"https://rinkeby.etherscan.io\"],\n};\n\nconst mainnetEth: MetamaskChainConfig = {\n  chainName: \"Rinkeby Test Network\",\n  chainId: \"0x1\",\n  nativeCurrency: { name: \"ETH\", decimals: 18, symbol: \"ETH\" },\n  rpcUrls: [\"https://rinkeby.etherscan.io\"],\n};\n\nconst getChainConfig = (chainId: number): MetamaskChainConfig => {\n  switch (chainId) {\n    case 1:\n      return mainnetEth;\n    case 4:\n      return rinkebyEth;\n    default:\n      throw new Error(`ChainId ${chainId} configuration not found`);\n  }\n};\n\nexport { rinkebyEth, mainnetEth, getChainConfig };\n","import { Metamask } from \"./metamask\";\nimport { MetamaskState } from \"./metamask/types\";\n\ntype EthereumState = {\n  metaMask?: MetamaskState;\n};\n\nclass Ethereum {\n  public metaMask: Metamask;\n\n  constructor(data?: EthereumState) {\n    this.metaMask = new Metamask(data?.metaMask);\n  }\n}\n\nexport type { Ethereum, EthereumState };\n","export * from \"./myalgo\";\nexport * from \"./Algorand\";\n","import {\n  SignedTx,\n  AlgorandTxn,\n  EncodedTransaction,\n  Accounts,\n} from \"@randlabs/myalgo-connect\";\nimport { WalletInterface, ChainID } from \"./../../types\";\nimport { MyAlgoAsset, MyAlgoSigner, MyAlgoState } from \"./types\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { NotImplementedError, WalletNotConnectedError } from \"~/src/errors\";\nimport { CHAINS } from \"~/src/config/constants\";\nimport HookRouter from \"~/src/utils/HookRouter/HookRouter\";\nimport {\n  HookEvent,\n  WALLET_HOOK,\n  WALLET_STATUS,\n} from \"~/src/utils/HookRouter/types\";\n\ntype MyAlgoConfig = {\n  shouldSelectOneAccount?: boolean;\n};\n\nconst initialState: Readonly<MyAlgoState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass MyAlgo implements WalletInterface<MyAlgoState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n    WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n    WALLET_HOOK.CHAIN_ON_CHANGE,\n  ]);\n  public state: MyAlgoState;\n  private provider: MyAlgoConnect | undefined;\n\n  constructor(state?: MyAlgoState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n  }\n\n  private enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(options: MyAlgoConfig = {}): Promise<WALLET_STATUS> {\n    const shouldSelectOneAccount = options.shouldSelectOneAccount || true;\n    const myAlgoConnect = this.getProvider();\n\n    // forces user to only choose one account.\n    // This prevents a lot of edge cases.\n    this.state.accounts = await myAlgoConnect.connect({\n      shouldSelectOneAccount,\n    });\n    this.state.isConnected = this.state.accounts.length > 0;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this.enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<MyAlgoSigner> {\n    return async (\n      transactions: AlgorandTxn[] | EncodedTransaction[]\n    ): Promise<SignedTx[]> => {\n      this.enforceIsConnected();\n\n      const myAlgoConnect = this.getProvider();\n      const signedTx = await myAlgoConnect.signTransaction(transactions);\n\n      return signedTx;\n    };\n  }\n\n  public async getBalance(): Promise<string> {\n    throw new NotImplementedError();\n  }\n\n  public async getAssets(): Promise<MyAlgoAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsWalletInstalled(): boolean {\n    return true; // wallet is web only so is always installed\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getPrimaryAccount(): Accounts {\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): Accounts[] {\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<string> {\n    return \"0x1\";\n  }\n\n  public onAccountChange(cb: (accounts: Accounts) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      () => {\n        return cb(this.getPrimaryAccount());\n      }\n    );\n  }\n\n  public onChainChange(cb: (chain: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.CHAIN_ON_CHANGE,\n      async () => {\n        const currentChainId = await this.fetchCurrentChainID();\n        return cb(currentChainId);\n      }\n    );\n  }\n\n  public onBlockAdded(\n    cb: (newBlock: unknown) => void | Promise<void>\n  ): HookEvent {\n    throw new NotImplementedError();\n  }\n\n  public toJSON(): MyAlgoState {\n    return this.state;\n  }\n\n  public getProvider(): MyAlgoConnect {\n    if (this.provider instanceof MyAlgoConnect) {\n      return this.provider;\n    }\n\n    this.provider = new MyAlgoConnect();\n    return this.provider;\n  }\n}\n\nexport { MyAlgo };\nexport { MyAlgoConfig };\n","import { MyAlgo } from \"./myalgo\";\nimport { MyAlgoState } from \"./myalgo/types\";\n\ntype AlgorandState = {\n  myAlgo?: MyAlgoState;\n};\n\nclass Algorand {\n  public myAlgo: MyAlgo;\n\n  constructor(data?: AlgorandState) {\n    this.myAlgo = new MyAlgo(data?.myAlgo);\n  }\n}\n\nexport { Algorand, AlgorandState };\n"],"names":[],"version":3,"file":"module.js.map"}