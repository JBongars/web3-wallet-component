{"mappings":"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","sources":["src/index.ts","src/types.ts","src/errors.ts","src/ethereum/index.ts","src/ethereum/metamask/index.ts","src/utils/HookRouter/HookRouter.ts","src/utils/HookRouter/types.ts","src/WalletStateStorage.ts","src/algorand/index.ts","src/algorand/myalgo/index.ts","src/algorand/Algorand.ts","src/algorand/walletconnect/index.ts","src/containers/index.ts","src/containers/window.ts","src/ethereum/metamask/chains.ts","src/ethereum/Ethereum.ts","src/ethereum/walletconnect/index.ts","src/ethereum/walletconnect/chains.ts"],"sourcesContent":["export * from \"./types\";\nexport * from \"./errors\";\nexport * from \"./ethereum\";\nexport * from \"./algorand\";\nexport * from \"./containers\";\n","import { AlgorandWallet, MyAlgo, WalletConnect } from \"./algorand\";\nimport { EthereumWallet, Metamask } from \"./ethereum\";\nimport { HookEvent, WALLET_STATUS } from \"./utils/HookRouter/types\";\n\ntype WALLET = AlgorandWallet | EthereumWallet;\n\ninterface useWallets {\n  use(walletName: \"MYALGO\"): MyAlgo;\n  use(walletName: \"METAMASK\"): Metamask;\n  use(walletName: \"WALLETCONNECT\"): WalletConnect;\n}\n\ntype Signer<T, S> = (transactions: T) => Promise<S[]>;\n\ninterface WalletInterface<T> {\n  init: () => Promise<WALLET_STATUS>;\n  signIn: () => Promise<WALLET_STATUS>;\n  signOut: () => Promise<WALLET_STATUS>;\n  getSigner: () => Promise<unknown>;\n  getBalance: () => Promise<string>;\n  getAssets: () => Promise<unknown[]>;\n  getIsConnected: () => boolean;\n  getIsWalletInstalled: () => boolean;\n  getPrimaryAccount: () => unknown;\n  getAccounts: () => unknown[];\n  fetchCurrentChainID: () => Promise<string>;\n  onAccountChange: (\n    cb: (accounts: unknown) => void | Promise<void>\n  ) => HookEvent;\n  onChainChange: (cb: (chainId: string) => void | Promise<void>) => HookEvent;\n  onBlockAdded: (cb: (block: unknown) => void | Promise<void>) => HookEvent;\n  toJSON: () => T;\n}\n\nexport { WALLET, WalletInterface };\nexport type { Signer, useWallets };\n","class NotImplementedError extends Error {\n  constructor(message: string = \"NotImplementedError\") {\n    super(message);\n    this.name = \"NotImplementedError\";\n  }\n}\n\nclass WalletNotInstalledError extends Error {\n  constructor(message: string = \"WalletNotInstalledError\") {\n    super(message);\n    this.name = \"WalletNotInstalledError\";\n  }\n}\n\nclass WalletNotConnectedError extends Error {\n  constructor(message: string = \"WalletNotConnectedError\") {\n    super(message);\n    this.name = \"WalletNotConnectedError\";\n  }\n}\n\nclass HookNotAvailableError extends Error {\n  constructor(message: string = \"HookNotAvailableError\") {\n    super(message);\n    this.name = \"HookNotAvailableError\";\n  }\n}\n\nexport {\n  NotImplementedError,\n  WalletNotInstalledError,\n  WalletNotConnectedError,\n  HookNotAvailableError,\n};\n","export * from \"./metamask\";\nexport * from \"./Ethereum\";\nexport * from \"./walletconnect\";\n\nconst CHAIN_ETHEREUM = \"ETHEREUM\";\nexport { CHAIN_ETHEREUM };\n","import { ethers } from \"ethers\";\nimport {\n  NotImplementedError,\n  WalletNotConnectedError,\n  WalletNotInstalledError\n} from \"~/src/errors\";\nimport HookRouter from \"~/src/utils/HookRouter/HookRouter\";\nimport { WALLET_HOOK, WALLET_ID, WALLET_STATUS } from \"~/src/utils/HookRouter/types\";\nimport WalletStateStorage from \"~/src/WalletStateStorage\";\nimport { CHAIN_ETHEREUM } from \"..\";\nimport { useWindow } from \"../../containers\";\nimport { WalletInterface } from \"../../types\";\nimport { getChainConfig } from \"./chains\";\nimport {\n  MetamaskAsset,\n  MetamaskChainConfig, MetamaskState\n} from \"./types\";\n\nconst initialState: Readonly<MetamaskState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass Metamask implements WalletInterface<MetamaskState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.CHAIN_ON_CHANGE,\n    WALLET_HOOK.CHAIN_ON_DISCONNECT,\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n    WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n    WALLET_HOOK.NEW_BLOCK,\n  ]);\n  private chain: string | null = null;\n  public state: MetamaskState;\n  public provider?: ethers.providers.Web3Provider;\n  private walletStorage: WalletStateStorage = new WalletStateStorage(CHAIN_ETHEREUM, WALLET_ID.ETHEREUM_METAMASK)\n\n  constructor(state?: MetamaskState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n\n    this.setupInitialState()\n  }\n\n  private async _getProvider(): Promise<ethers.providers.Web3Provider> {\n    const ethereum = (await useWindow(\n      async (windowObject) => (windowObject as any).ethereum\n    )) as any;\n\n    if (!Boolean(ethereum)) {\n      throw new WalletNotInstalledError();\n    }\n\n    return new ethers.providers.Web3Provider(ethereum);\n  }\n\n  private _enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  private async _enforceChain(): Promise<void> {\n    if (this.chain === null) return;\n\n    const provider = await this._getProvider();\n    const currentChain: string = await provider.send(\"eth_chainId\", []);\n\n    if (currentChain !== this.chain) {\n      throw new Error(\n        `Chain has changed to ${currentChain} when it should be ${this.chain}`\n      );\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    this.provider = await this._getProvider();\n\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(): Promise<WALLET_STATUS> {\n    const provider = await this._getProvider();\n    this.state.accounts = await provider.send(\"eth_requestAccounts\", []);\n    this.state.isConnected = this.state.accounts.length > 0;\n\n    this.updateWalletStorageValue()\n\n    this.hookRouter.applyHookWithArgs(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      this.state.accounts\n    );\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this._enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n\n    this.updateWalletStorageValue()\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<ethers.providers.JsonRpcSigner> {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    const provider = this.provider || (await this._getProvider());\n\n    return provider.getSigner();\n  }\n\n  public async getBalance(): Promise<string> {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    const provider = this.provider || (await this._getProvider());\n    const balance = await provider.getBalance(this.state.accounts[0]);\n    return balance.toString();\n  }\n\n  public async getAssets(): Promise<MetamaskAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getIsWalletInstalled(): boolean {\n    const ethereum = useWindow(\n      (windowObject) => (windowObject as any).ethereum\n    ) as any;\n\n    return Boolean(ethereum);\n  }\n\n  public getPrimaryAccount(): string {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): string[] {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<string> {\n    const provider: ethers.providers.Web3Provider = await this._getProvider();\n    const chainId = await provider.send(\"eth_chainId\", []);\n\n    return chainId;\n  }\n\n  public async addChainToWallet(\n    chainConfig: MetamaskChainConfig\n  ): Promise<void> {\n    return useWindow(async (window: any) =>\n      window.ethereum?.request({\n        method: \"wallet_addEthereumChain\",\n        params: [chainConfig],\n      })\n    );\n  }\n\n  public async switchChainFromWallet(chain: number) {\n    const ethereum = useWindow((window: any) => window.ethereum);\n    if (ethereum.networkVersion !== chain) {\n      try {\n        await ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: `0x${chain}` }],\n        });\n      } catch (err) {\n        if (err && (err as { code: number }).code === 4902) {\n          const chainConfig = getChainConfig(chain);\n          await this.addChainToWallet(chainConfig);\n        } else {\n          throw err;\n        }\n      }\n    }\n  }\n\n  public async forceCurrentChainID(chain: number): Promise<void> {\n    if (this.chain !== null && this.chain !== `0x${chain}`) {\n      throw new Error(\n        `Cannot force chain to be 0x${chain} because it is already forced to be 0x${this.chain}`\n      );\n    }\n\n    this.chain = `0x${chain}`;\n    this.switchChainFromWallet(chain);\n  }\n\n  public onAccountChange(cb: (accounts: string[]) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n  }\n\n  public onChainChange(cb: (chain: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n  }\n\n  public onAccountDisconnect(cb: () => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n      cb\n    );\n  }\n\n  public onChainDisconnect(cb: () => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.CHAIN_ON_DISCONNECT,\n      cb\n    );\n  }\n\n  public onBlockAdded(cb: (newBlock: number) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.NEW_BLOCK,\n      (block: number) => {\n        return cb(block);\n      }\n    );\n  }\n\n  public toJSON(): MetamaskState {\n    return this.state;\n  }\n\n  public async mountEventListeners() {\n    const provider = await this._getProvider();\n    if (typeof window !== \"undefined\" && \"ethereum\" in window) {\n      const ethereum = useWindow((window: any) => window.ethereum);\n      if (ethereum.on) {\n        ethereum.on(\"accountsChanged\", async (accounts: string[]) => {\n          this.state.accounts = accounts;\n          if (accounts.length === 0) {\n            await this.signOut();\n          } else {\n            this.hookRouter.applyHookWithArgs(\n              WALLET_HOOK.ACCOUNT_ON_CHANGE,\n              accounts\n            );\n          }\n          this.updateWalletStorageValue()\n        });\n\n        ethereum.on(\"chainChanged\", async (chainId: string) => {\n          this.hookRouter.applyHookWithArgs(WALLET_HOOK.CHAIN_ON_CHANGE, chainId);\n        });\n\n        ethereum.on(\"disconnect\", async (err: Error) => {\n          this.hookRouter.applyHooks([WALLET_HOOK.CHAIN_ON_DISCONNECT]);\n        });\n      }\n    }\n\n    provider.on(\"block\", (block: number) => {\n      this.hookRouter.applyHookWithArgs(WALLET_HOOK.NEW_BLOCK, block);\n    });\n  }\n\n  public async unmountEventListeners() {\n    const provider = await this._getProvider();\n    provider.removeAllListeners();\n  }\n\n  public async getProvider(): Promise<ethers.providers.Web3Provider> {\n    await this._enforceChain();\n\n    return this._getProvider();\n  }\n\n  private setupInitialState() {\n    const storageValue = this.walletStorage.getValue();\n\n    if (storageValue) {\n      this.state = {\n        isConnected: storageValue.isConnected,\n        accounts: [storageValue.account],\n      };\n    }\n  }\n\n  private updateWalletStorageValue() {\n    if (this.state.isConnected && this.state.accounts.length > 0) {\n      this.walletStorage.updateValue(true, this.state.accounts[0]);\n    } else {\n      this.walletStorage.updateValue(false, \"\");\n    }\n  }\n}\n\nexport { Metamask };\n","import { HookNotAvailableError } from \"../../errors\";\nimport { HookEvent, WALLET_HOOK } from \"./types\";\n\nclass HookRouter {\n  private availableHooks: WALLET_HOOK[];\n  private hooks: Map<WALLET_HOOK, Map<Symbol, Function>>;\n\n  constructor(hooks: WALLET_HOOK[]) {\n    this.hooks = new Map();\n    this.availableHooks = hooks;\n\n    this.resetAllHooks();\n  }\n\n  private checkIfValidHook(hook: WALLET_HOOK) {\n    if (!this.hooks.has(hook)) {\n      throw new HookNotAvailableError();\n    }\n  }\n\n  public getAvailableHooks() {\n    return [...this.availableHooks];\n  }\n\n  public resetHook(hook: WALLET_HOOK) {\n    this.checkIfValidHook(hook);\n\n    this.hooks.delete(hook);\n    this.hooks.set(hook, new Map());\n  }\n\n  public resetAllHooks() {\n    this.availableHooks.forEach((hook) => {\n      this.hooks.set(hook, new Map());\n    });\n  }\n\n  public registerCallback(hook: WALLET_HOOK, cb: Function): HookEvent {\n    this.checkIfValidHook(hook);\n\n    const id = Symbol();\n    this.hooks.get(hook)?.set(id, cb);\n\n    return {\n      id,\n      destroy: () => this.deregisterCallback(hook, id),\n    };\n  }\n\n  public deregisterCallback(hook: WALLET_HOOK, id: Symbol) {\n    this.checkIfValidHook(hook);\n\n    this.hooks.get(hook)?.delete(id);\n  }\n\n  public async applyHooks(hooks: WALLET_HOOK[]): Promise<void> {\n    const callbacksToInvoke: Function[] = [];\n\n    hooks.forEach((hook) => {\n      this.hooks\n        .get(hook)\n        ?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n    });\n\n    await Promise.all(callbacksToInvoke.map((fn) => fn()));\n  }\n\n  public async applyHookWithArgs(\n    hook: WALLET_HOOK,\n    ...args: any[]\n  ): Promise<void> {\n    const callbacksToInvoke: Function[] = [];\n\n    this.hooks.get(hook)?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n\n    await Promise.all(callbacksToInvoke.map((fn) => fn(...args)));\n  }\n}\n\nexport default HookRouter;\n","enum WALLET_STATUS {\n  OK,\n  LOGIN_ERROR,\n  WALLET_ERROR,\n  EXTENSION_NOT_FOUND,\n  ACCOUNT_NOT_FOUND,\n}\n\nenum WALLET_ID {\n  ETHEREUM_METAMASK = 1,\n  ALGORAND_MYALGO = 2,\n  ALGORAND_WALLETCONNECT = 3,\n  ETHEREUM_WALLETCONNECT = 4\n}\n\nenum WALLET_HOOK {\n  CHAIN_ON_CHANGE,\n  CHAIN_ON_DISCONNECT,\n  ACCOUNT_ON_CHANGE,\n  ACCOUNT_ON_DISCONNECT,\n  NEW_BLOCK,\n  CONNECT,\n}\n\ntype HookEvent = {\n  destroy: () => void;\n  id: Symbol;\n};\n\nexport { WALLET_HOOK, WALLET_STATUS, WALLET_ID };\nexport type { HookEvent };\n","import { isValidAddress } from \"algosdk\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { CHAIN_ALGORAND } from \"./algorand\";\nimport { useWindow } from \"./containers\";\nimport { CHAIN_ETHEREUM } from \"./ethereum\";\nimport { WALLET_ID } from \"./utils/HookRouter/types\";\n\ntype StorageValue = {\n  isConnected: boolean;\n  account: string;\n  chain: string;\n  walletid: WALLET_ID\n};\n\nconst STORAGE_KEY = \"wallet-state-storage\";\n\nclass WalletStateStorage {\n  private chain: string;\n  private storage: Storage | null;\n  private walletid: WALLET_ID\n\n  constructor(chain: string, walletid: WALLET_ID) {\n    this.chain = chain;\n    this.walletid = walletid\n    this.storage = this._storage();\n  }\n\n  public getValue(): StorageValue | null {\n    const value = this.values().find((state) => state.chain === this.chain && this.walletid == state.walletid) || null;\n\n    if (value && !this.isValidAddress(value.account)) {\n      return {\n        isConnected: false,\n        account: \"\",\n        chain: this.chain,\n        walletid: this.walletid\n      };\n    }\n\n    return value\n  }\n\n  public updateValue(isConnected: boolean, account: string): void {\n    const exisitingValues = this.getValue();\n    let values = this.values();\n\n    if (exisitingValues) {\n      values = values.map((value) => {\n        if (value.chain === this.chain && value.walletid === this.walletid) {\n          return {\n            chain: this.chain,\n            isConnected,\n            account,\n            walletid: this.walletid\n          };\n        }\n        return value;\n      });\n    } else {\n      values = values.concat({\n        chain: this.chain,\n        isConnected,\n        account,\n        walletid: this.walletid\n      });\n    }\n\n    this.storage?.setItem(STORAGE_KEY, JSON.stringify(values));\n  }\n\n  private isValidAddress(account: string): boolean {\n    switch (this.chain) {\n      case CHAIN_ETHEREUM:\n        return isAddress(account);\n      case CHAIN_ALGORAND:\n        return isValidAddress(account);\n      default:\n        return false;\n    }\n  }\n\n  private values(): StorageValue[] {\n    const values = this._storage()?.getItem(STORAGE_KEY);\n    return values ? JSON.parse(values) : [];\n  }\n\n  private _storage(): Storage | null {\n    return useWindow((windowObject) => (windowObject as any).localStorage);\n  }\n}\n\nexport default WalletStateStorage;\n\nexport type { StorageValue };\n","export * from \"./myalgo\";\nexport * from \"./Algorand\";\nexport * from \"./walletconnect\";\n\nconst CHAIN_ALGORAND = \"ALGORAND\";\nexport { CHAIN_ALGORAND };\n","import MyAlgoConnect, {\n  Accounts, AlgorandTxn, EncodedTransaction, SignedTx\n} from \"@randlabs/myalgo-connect\";\nimport { NotImplementedError, WalletNotConnectedError } from \"~/src/errors\";\nimport HookRouter from \"~/src/utils/HookRouter/HookRouter\";\nimport {\n  HookEvent,\n  WALLET_HOOK,\n  WALLET_STATUS\n} from \"~/src/utils/HookRouter/types\";\nimport WalletStateStorage from \"~/src/WalletStateStorage\";\nimport { CHAIN_ALGORAND } from \"..\";\nimport { AlgorandSignerTxn } from \"../Algorand\";\nimport { WalletInterface } from \"./../../types\";\nimport { MyAlgoAsset, MyAlgoSigner, MyAlgoState } from \"./types\";\n\ntype MyAlgoConfig = {\n  shouldSelectOneAccount?: boolean;\n};\n\ntype MyAlgoTransaction = AlgorandTxn[] | EncodedTransaction[];\n\nconst initialState: Readonly<MyAlgoState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass MyAlgo implements WalletInterface<MyAlgoState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n    WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n    WALLET_HOOK.CHAIN_ON_CHANGE,\n  ]);\n  public state: MyAlgoState;\n  private provider: MyAlgoConnect | undefined;\n  private walletStorage: WalletStateStorage = new WalletStateStorage(CHAIN_ALGORAND);\n\n  constructor(state?: MyAlgoState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n\n    this.setupInitialState()\n  }\n\n  private enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(options: MyAlgoConfig = {}): Promise<WALLET_STATUS> {\n    const shouldSelectOneAccount = options.shouldSelectOneAccount || true;\n    const myAlgoConnect = this.getProvider();\n\n    // forces user to only choose one account.\n    // This prevents a lot of edge cases.\n    this.state.accounts = await myAlgoConnect.connect({\n      shouldSelectOneAccount,\n    });\n    this.state.isConnected = this.state.accounts.length > 0;\n    this.updateWalletStorageValue();\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this.enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n    this.updateWalletStorageValue();\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<MyAlgoSigner> {\n    return async (transactions: AlgorandSignerTxn): Promise<SignedTx[]> => {\n      this.enforceIsConnected();\n\n      const myAlgoConnect = this.getProvider();\n      const signedTx = await myAlgoConnect.signTransaction(\n        transactions as MyAlgoTransaction\n      );\n\n      return signedTx;\n    };\n  }\n\n  public async getBalance(): Promise<string> {\n    throw new NotImplementedError();\n  }\n\n  public async getAssets(): Promise<MyAlgoAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsWalletInstalled(): boolean {\n    return true; // wallet is web only so is always installed\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getPrimaryAccount(): Accounts {\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): Accounts[] {\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<string> {\n    return \"0x1\";\n  }\n\n  public onAccountChange(cb: (accounts: Accounts) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      () => {\n        return cb(this.getPrimaryAccount());\n      }\n    );\n  }\n\n  public onChainChange(cb: (chain: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.CHAIN_ON_CHANGE,\n      async () => {\n        const currentChainId = await this.fetchCurrentChainID();\n        return cb(currentChainId);\n      }\n    );\n  }\n\n  public onBlockAdded(\n    cb: (newBlock: unknown) => void | Promise<void>\n  ): HookEvent {\n    throw new NotImplementedError();\n  }\n\n  public toJSON(): MyAlgoState {\n    return this.state;\n  }\n\n  public getProvider(): MyAlgoConnect {\n    if (this.provider instanceof MyAlgoConnect) {\n      return this.provider;\n    }\n\n    this.provider = new MyAlgoConnect();\n    return this.provider;\n  }\n\n  private setupInitialState() {\n    const storageValue = this.walletStorage.getValue();\n\n    if (storageValue) {\n      this.state = {\n        isConnected: !storageValue.walletconnect && storageValue.isConnected,\n        accounts: [{ name: \"\", address: storageValue.account }],\n      };\n    }\n  }\n\n  private updateWalletStorageValue() {\n    if (this.state.isConnected && this.state.accounts.length > 0) {\n      this.walletStorage.updateValue(true, this.state.accounts[0].address);\n    } else {\n      this.walletStorage.updateValue(false, \"\");\n    }\n  }\n}\n\nexport { MyAlgo };\nexport type { MyAlgoConfig, MyAlgoTransaction };\n","import { MyAlgo, MyAlgoTransaction } from \"./myalgo\";\nimport { MyAlgoSigner, MyAlgoState } from \"./myalgo/types\";\nimport { WalletConnect, WalletConnectTransaction } from \"./walletconnect\";\nimport { WalletConnectSigner, WalletConnectState } from \"./walletconnect/types\";\n\ntype AlgorandWallet = MyAlgo | WalletConnect;\n\ntype AlgorandSignerTxn = MyAlgoTransaction | WalletConnectTransaction;\ntype AlgorandSigner = MyAlgoSigner | WalletConnectSigner;\n\ntype AlgorandState = {\n  myAlgo?: MyAlgoState;\n  walletConnect?: WalletConnectState;\n};\n\nclass Algorand {\n  public myAlgo: MyAlgo;\n  public walletConnect: WalletConnect;\n\n  constructor(data?: AlgorandState) {\n    this.myAlgo = new MyAlgo(data?.myAlgo);\n    this.walletConnect = new WalletConnect(data?.walletConnect);\n  }\n}\n\nexport { AlgorandWallet, AlgorandSignerTxn, AlgorandSigner, Algorand, AlgorandState };\n","import { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { SignedTx } from \"@randlabs/myalgo-connect\";\nimport WalletConnectClient from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { NotImplementedError, WalletNotConnectedError } from \"~/src/errors\";\nimport HookRouter from \"~/src/utils/HookRouter/HookRouter\";\nimport {\n  HookEvent,\n  WALLET_HOOK,\n  WALLET_STATUS\n} from \"~/src/utils/HookRouter/types\";\nimport WalletStateStorage from \"~/src/WalletStateStorage\";\nimport { CHAIN_ALGORAND } from \"..\";\nimport { WalletInterface } from \"../../types\";\nimport { AlgorandSignerTxn } from \"../Algorand\";\nimport { WalletConnectAsset, WalletConnectSigner, WalletConnectState } from \"./types\";\n\ntype Accounts = {\n  address: string;\n  name: string;\n}\n\ntype WalletConnectTransaction = Uint8Array[];\n\nconst initialState: Readonly<WalletConnectState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass WalletConnect implements WalletInterface<WalletConnectState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n    WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n    WALLET_HOOK.CHAIN_ON_CHANGE,\n  ]);\n  public state: WalletConnectState;\n  private provider: WalletConnectClient | undefined;\n  private walletStorage = new WalletStateStorage(CHAIN_ALGORAND);\n\n  constructor(state?: WalletConnectState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n\n    this.setupInitialState()\n  }\n\n  private enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(): Promise<WALLET_STATUS> {\n    this.provider = new WalletConnectClient({\n      bridge: \"https://bridge.walletconnect.org\", // Required\n      qrcodeModal: QRCodeModal,\n    });\n\n    if (!this.provider.connected) {\n      // create new session\n      await this.provider.createSession();\n    } else {\n      const { accounts } = this.provider;\n\n      this.state.isConnected = Array.isArray(accounts) && accounts.length > 0;\n      this.state.accounts = accounts;\n      this.updateWalletStorageValue()\n      this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    }\n\n    this.provider.on(\"connect\", ((error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      // Get provided accounts\n      const { accounts } = payload.params[0];\n      this.state.isConnected = Array.isArray(accounts) && accounts.length > 0;\n      this.state.accounts = accounts;\n      this.updateWalletStorageValue()\n      this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    }));\n\n    this.provider.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n      this.signOut();\n    });\n\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this.state.accounts = [];\n    this.state.isConnected = false;\n\n    if (!this.provider) {\n      this.getProvider()\n    }\n\n    try {\n      await this.provider?.killSession();\n    } catch (e) { }\n    this.provider = undefined;\n    this.updateWalletStorageValue()\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<WalletConnectSigner> {\n    return async (\n      transactions: AlgorandSignerTxn,\n    ): Promise<SignedTx[]> => {\n      this.enforceIsConnected();\n      const walletConnect = this.getProvider();\n      const txnsToSign = (transactions as WalletConnectTransaction).map(txn => ({\n        txn: Buffer.from(txn).toString(\"base64\")\n      }));\n      const jsonRpcRequest = formatJsonRpcRequest(\"algo_signTxn\", [txnsToSign]);\n      let signedTxns = await walletConnect.sendCustomRequest(jsonRpcRequest);\n      let signedTxns2: any = [];\n      for (let i = 0; i < signedTxns.length; i++) {\n        if (signedTxns[i] !== null) {\n          signedTxns2.push({\n            txID: \"\",\n            blob: new Uint8Array(Buffer.from(signedTxns[i], \"base64\"))\n          })\n        } else {\n          signedTxns2.push({\n            txId: \"\",\n            blob: null\n          })\n        }\n      }\n\n      return signedTxns2;\n    };\n  }\n\n  public async getBalance(): Promise<string> {\n    throw new NotImplementedError();\n  }\n\n  public async getAssets(): Promise<WalletConnectAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsWalletInstalled(): boolean {\n    return true; // wallet is web only so is always installed\n  }\n\n  public getIsConnected(): boolean {\n    const provider = this.getProvider();\n\n    return provider.connected;\n  }\n\n  public getPrimaryAccount(): Accounts {\n    return {\n      address: this.state.accounts[0],\n      name: \"\"\n    };\n  }\n\n  public getAccounts(): Accounts[] {\n    return this.state.accounts.map(ob => ({ address: ob, name: \"\" }));\n  }\n\n  public async fetchCurrentChainID(): Promise<string> {\n    return \"0x1\";\n  }\n\n  public onAccountChange(cb: (accounts: Accounts) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      () => {\n        return cb(this.getPrimaryAccount());\n      }\n    );\n  }\n\n  public onChainChange(cb: (chain: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.CHAIN_ON_CHANGE,\n      async () => {\n        const currentChainId = await this.fetchCurrentChainID();\n        return cb(currentChainId);\n      }\n    );\n  }\n\n  public onBlockAdded(\n    cb: (newBlock: unknown) => void | Promise<void>\n  ): HookEvent {\n    throw new NotImplementedError();\n  }\n\n  public toJSON(): WalletConnectState {\n    return this.state;\n  }\n\n  public getProvider(): WalletConnectClient {\n    if (this.provider instanceof WalletConnectClient) {\n      return this.provider;\n    }\n\n    this.provider = new WalletConnectClient({\n      bridge: \"https://bridge.walletconnect.org\", // Required\n      qrcodeModal: QRCodeModal,\n    });\n    return this.provider;\n  }\n\n  private setupInitialState() {\n    const storageValue = this.walletStorage.getValue();\n\n    if (storageValue) {\n      this.state = {\n        isConnected: this.getIsConnected(),\n        accounts: [storageValue.account],\n      };\n    }\n  }\n\n  private updateWalletStorageValue() {\n    if (this.state.isConnected && this.state.accounts.length > 0) {\n      this.walletStorage.updateValue(true, this.state.accounts[0], true);\n    } else {\n      this.walletStorage.updateValue(false, \"\", true);\n    }\n  }\n}\n\nexport { WalletConnect, WalletConnectTransaction };\n","export * from \"./window\";\n","const useWindow = <T>(cb: (windowObject: unknown) => T): T | null => {\n  if (Object.keys(globalThis).includes(\"window\")) {\n    return cb(globalThis.window);\n  } else {\n    return null;\n  }\n};\n\nexport { useWindow };\n","import { MetamaskChainConfig } from \"./types\";\n\nconst rinkebyEth: MetamaskChainConfig = {\n  chainName: \"Rinkeby Test Network\",\n  chainId: \"0x4\",\n  nativeCurrency: { name: \"ETH\", decimals: 18, symbol: \"ETH\" },\n  rpcUrls: [\"https://rinkeby.etherscan.io\"],\n};\n\nconst mainnetEth: MetamaskChainConfig = {\n  chainName: \"Rinkeby Test Network\",\n  chainId: \"0x1\",\n  nativeCurrency: { name: \"ETH\", decimals: 18, symbol: \"ETH\" },\n  rpcUrls: [\"https://rinkeby.etherscan.io\"],\n};\n\nconst getChainConfig = (chainId: number): MetamaskChainConfig => {\n  switch (chainId) {\n    case 1:\n      return mainnetEth;\n    case 4:\n      return rinkebyEth;\n    default:\n      throw new Error(`ChainId ${chainId} configuration not found`);\n  }\n};\n\nexport { rinkebyEth, mainnetEth, getChainConfig };\n","import { Metamask } from \"./metamask\";\nimport { EthWalletConnect } from \"./walletconnect\";\nimport { WalletConnectState } from \"./walletconnect/types\";\nimport { MetamaskState, MetamaskSigner } from \"./metamask/types\";\n\ntype EthereumWallet = Metamask | EthWalletConnect;\n\ntype EthereumSigner = MetamaskSigner;\n\ntype EthereumState = {\n  metaMask?: MetamaskState;\n  walletConnect?: WalletConnectState;\n};\n\nclass Ethereum {\n  public metaMask: Metamask;\n  public walletConnect: EthWalletConnect;\n\n  constructor(data?: EthereumState) {\n    this.metaMask = new Metamask(data?.metaMask);\n    this.walletConnect = new EthWalletConnect();\n  }\n}\n\nexport type { EthereumWallet, EthereumSigner, Ethereum, EthereumState };\n","import { WalletInterface } from \"../../types\";\nimport {\n  WalletConnectAsset,\n  WalletConnectChainConfig,\n  WalletConnectSigner,\n  WalletConnectState,\n} from \"./types\";\nimport { ethers, providers } from \"ethers\";\nimport {\n  TransactionRequest,\n  TransactionResponse,\n} from \"@ethersproject/abstract-provider\";\nimport { useWindow } from \"../../containers\";\nimport {\n  NotImplementedError,\n  WalletNotConnectedError,\n  WalletNotInstalledError,\n} from \"~/src/errors\";\nimport HookRouter from \"~/src/utils/HookRouter/HookRouter\";\nimport { WALLET_HOOK, WALLET_ID, WALLET_STATUS } from \"~/src/utils/HookRouter/types\";\nimport { getChainConfig } from \"./chains\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletStateStorage from \"~/src/WalletStateStorage\";\nimport { CHAIN_ETHEREUM } from \"..\"\n\nconst initialState: Readonly<WalletConnectState> = Object.freeze({\n  accounts: [],\n  isConnected: false,\n});\n\nclass EthWalletConnect implements WalletInterface<WalletConnectState> {\n  private hookRouter: HookRouter = new HookRouter([\n    WALLET_HOOK.CHAIN_ON_CHANGE,\n    WALLET_HOOK.CHAIN_ON_DISCONNECT,\n    WALLET_HOOK.ACCOUNT_ON_CHANGE,\n    WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n    WALLET_HOOK.NEW_BLOCK,\n  ]);\n  private chain: string | null = null;\n  public state: WalletConnectState;\n  public provider?: ethers.providers.Web3Provider;\n  private walletStorage = new WalletStateStorage(CHAIN_ETHEREUM, WALLET_ID.ETHEREUM_WALLETCONNECT);\n\n  constructor(state?: WalletConnectState) {\n    if (state) {\n      this.state = { ...state };\n    } else {\n      this.state = { ...initialState };\n    }\n    \n  }\n\n  private async _getProvider(): Promise<ethers.providers.Web3Provider> {\n    const provider = await this.getWCProvider();\n    return new providers.Web3Provider(provider);\n  }\n\n  private _enforceIsConnected(): void {\n    if (!this.getIsConnected()) {\n      throw new WalletNotConnectedError();\n    }\n  }\n\n  private async _enforceChain(): Promise<void> {\n    if (this.chain === null) return;\n\n    // const provider = await this._getWeb3Provider();\n    const provider = await this._getProvider();\n    const currentChain: string = await provider.send(\"eth_chainId\", []);\n\n    if (currentChain !== this.chain) {\n      throw new Error(\n        `Chain has changed to ${currentChain} when it should be ${this.chain}`\n      );\n    }\n  }\n\n  public async getWCProvider(): Promise<WalletConnectProvider> {\n    const walletConnectProvider = new WalletConnectProvider({\n      infuraId: \"f83857b162d64708b25a59585f969fbd\", // Required\n      qrcode: true\n    });\n    await walletConnectProvider.enable();\n\n    return walletConnectProvider;\n  }\n\n  public async init(): Promise<WALLET_STATUS> {\n    this.provider = await this._getProvider();\n\n    return WALLET_STATUS.OK;\n  }\n\n  public async signIn(): Promise<WALLET_STATUS> {\n    const provider = await this._getProvider();\n    this.state.accounts = await provider.listAccounts();\n    this.state.isConnected = this.state.accounts.length > 0;\n    this.updateWalletStorageValue();\n    this.hookRouter.applyHookWithArgs(\n      WALLET_HOOK.ACCOUNT_ON_CHANGE,\n      this.state.accounts\n    );\n    return WALLET_STATUS.OK;\n  }\n\n  public async signOut(): Promise<WALLET_STATUS> {\n    this._enforceIsConnected();\n    this.state.accounts = [];\n    this.state.isConnected = false;\n    this.provider = undefined;\n    this.updateWalletStorageValue();\n    (await this.getWCProvider()).disconnect();\n\n    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n    return WALLET_STATUS.OK;\n  }\n\n  public async getSigner(): Promise<ethers.providers.JsonRpcSigner> {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    const provider = this.provider || (await this._getProvider());\n\n    return provider.getSigner();\n  }\n\n  public async getBalance(): Promise<string> {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    const provider = await this._getProvider();\n    const balance = await provider.getBalance(this.state.accounts[0]);\n    return balance.toString();\n  }\n\n  public async getAssets(): Promise<WalletConnectAsset[]> {\n    throw new NotImplementedError();\n  }\n\n  public getIsConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  public getIsWalletInstalled(): boolean {\n    const ethereum = useWindow(\n      (windowObject) => (windowObject as any).ethereum\n    ) as any;\n\n    return Boolean(ethereum);\n  }\n\n  public getPrimaryAccount(): string {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    return this.state.accounts[0];\n  }\n\n  public getAccounts(): string[] {\n    this._enforceChain();\n    this._enforceIsConnected();\n\n    return this.state.accounts;\n  }\n\n  public async fetchCurrentChainID(): Promise<string> {\n    const provider: ethers.providers.Web3Provider = await this._getProvider();\n    const chainId = await provider.send(\"eth_chainId\", []);\n\n    return chainId;\n  }\n\n  public async addChainToWallet(\n    chainConfig: WalletConnectChainConfig\n  ): Promise<void> {\n    return useWindow(async (window: any) =>\n      window.ethereum?.request({\n        method: \"wallet_addEthereumChain\",\n        params: [chainConfig],\n      })\n    );\n  }\n\n  public async switchChainFromWallet(chain: number) {\n    const ethereum = useWindow((window: any) => window.ethereum);\n    if (ethereum.networkVersion !== chain) {\n      try {\n        await ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: `0x${chain}` }],\n        });\n      } catch (err) {\n        if (err && (err as { code: number }).code === 4902) {\n          const chainConfig = getChainConfig(chain);\n          await this.addChainToWallet(chainConfig);\n        } else {\n          throw err;\n        }\n      }\n    }\n  }\n\n  public async forceCurrentChainID(chain: number): Promise<void> {\n    if (this.chain !== null && this.chain !== `0x${chain}`) {\n      throw new Error(\n        `Cannot force chain to be 0x${chain} because it is already forced to be 0x${this.chain}`\n      );\n    }\n\n    this.chain = `0x${chain}`;\n    this.switchChainFromWallet(chain);\n  }\n\n  public onAccountChange(cb: (accounts: string[]) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n  }\n\n  public onChainChange(cb: (chain: string) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n  }\n\n  public onAccountDisconnect(cb: () => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n      cb\n    );\n  }\n\n  public onChainDisconnect(cb: () => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.CHAIN_ON_DISCONNECT,\n      cb\n    );\n  }\n\n  public onBlockAdded(cb: (newBlock: number) => void | Promise<void>) {\n    return this.hookRouter.registerCallback(\n      WALLET_HOOK.NEW_BLOCK,\n      (block: number) => {\n        return cb(block);\n      }\n    );\n  }\n\n  public toJSON(): WalletConnectState {\n    return this.state;\n  }\n\n  public async mountEventListeners() {}\n\n  public async unmountEventListeners() {}\n\n  public async getProvider(): Promise<ethers.providers.Web3Provider> {\n    await this._enforceChain();\n    return await this._getProvider();\n  }\n\n  private updateWalletStorageValue() {\n    if (this.state.isConnected && this.state.accounts.length > 0) {\n      this.walletStorage.updateValue(true, this.state.accounts[0]);\n    } else {\n      this.walletStorage.updateValue(false, \"\");\n    }\n  }\n  \n}\n\nexport { EthWalletConnect };\n","import { WalletConnectChainConfig } from \"./types\";\n\nconst rinkebyEth: WalletConnectChainConfig = {\n  chainName: \"Rinkeby Test Network\",\n  chainId: \"0x4\",\n  nativeCurrency: { name: \"ETH\", decimals: 18, symbol: \"ETH\" },\n  rpcUrls: [\"https://rinkeby.etherscan.io\"],\n};\n\nconst mainnetEth: WalletConnectChainConfig = {\n  chainName: \"Rinkeby Test Network\",\n  chainId: \"0x1\",\n  nativeCurrency: { name: \"ETH\", decimals: 18, symbol: \"ETH\" },\n  rpcUrls: [\"https://rinkeby.etherscan.io\"],\n};\n\nconst getChainConfig = (chainId: number): WalletConnectChainConfig => {\n  switch (chainId) {\n    case 1:\n      return mainnetEth;\n    case 4:\n      return rinkebyEth;\n    default:\n      throw new Error(`ChainId ${chainId} configuration not found`);\n  }\n};\n\nexport { rinkebyEth, mainnetEth, getChainConfig };\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}