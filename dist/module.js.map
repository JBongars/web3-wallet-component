{"mappings":"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","sources":["src/index.ts","src/types.ts","src/errors.ts","src/ethereum/index.ts","src/ethereum/metamask/index.ts","src/ethereum/metamask/Metamask.ts","src/utils/HookRouter/HookRouter.ts","src/utils/HookRouter/types.ts","src/WalletStateStorage.ts","src/algorand/index.ts","src/algorand/myalgo/index.ts","src/algorand/myalgo/MyAlgo.ts","src/config/wallets.ts","src/algorand/myalgo/types.ts","src/algorand/Algorand.ts","src/utils/HookRouter/index.ts","src/algorand/perawallet/index.ts","src/algorand/perawallet/PeraWallet.ts","src/algorand/perawallet/types.ts","src/algorand/walletconnect/index.ts","src/algorand/walletconnect/WalletConnect.ts","src/algorand/walletconnect/types.ts","src/algorand/types.ts","src/containers/index.ts","src/containers/window.ts","src/ethereum/chains.ts","src/ethereum/metamask/types.ts","src/ethereum/Ethereum.ts","src/ethereum/walletconnect/index.ts","src/ethereum/walletconnect/WalletConnect.ts","src/ethereum/walletconnect/types.ts","src/ethereum/types.ts","src/config/index.ts","src/SuperWallet.ts"],"sourcesContent":["export * from './types';\nexport * from './errors';\nexport * from './ethereum';\nexport * from './algorand';\nexport * from './containers';\nexport * from './config';\nexport * from './SuperWallet';\nexport * from './WalletStateStorage';\n","// import { MyAlgo, WalletConnect } from \"./algorand\";\n// import { Metamask, EthWalletConnect } from \"./ethereum\";\nimport { Algorand, AlgorandWallet } from './algorand';\nimport { Ethereum, EthereumWallet } from './ethereum';\nimport { HookEvent, WALLET_STATUS } from './utils/HookRouter/types';\n\ntype Wallet = AlgorandWallet | EthereumWallet;\ntype WALLET = Wallet;\ntype ChainWallet = Algorand | Ethereum;\n\ntype Signer<T, S> = (transactions: T) => Promise<S[]>;\n\ntype EVMBasedChain = {\n    chain: string;\n    chainId: number;\n    faucets: unknown[];\n    infoURL: string;\n    name: string;\n    nativeCurrency: {\n        name: string;\n        symbol: string;\n        decimals: number;\n    };\n    networkId: number;\n    rpc: string[];\n    shortName: string;\n};\n\ninterface WalletInterface<T> {\n    /**\n     * initializes the wallet\n     * @remarks this requires the wallet to be installed in the browser\n     * wallet init script to be added at a later date\n     * @returns wallet status\n     */\n    init: () => Promise<WALLET_STATUS>;\n    /**\n     * sign into the wallet and allow wallet-component to use below method\n     * @remarks most wallets will prompt a modal when this event is called\n     * @returns wallet status\n     */\n    signIn: () => Promise<WALLET_STATUS>;\n    /**\n     * sign out of all accounts in a wallet\n     * @returns wallet status\n     */\n    signOut: () => Promise<WALLET_STATUS>;\n    /**\n     * get the current signer object for a wallet\n     * @remarks the signer object is usually a function that will take an unsigned transaction and return a signed transaction\n     * custom signers may be available directly from the wallet provider depending on the blockchain\n     * @returns signer object\n     */\n    getSigner: () => Promise<unknown>;\n    /**\n     * get the current balance of the wallet\n     * @returns wallet balance\n     */\n    getBalance: () => Promise<string>;\n    /**\n     * check whether the wallet is currently connected\n     */\n    getIsConnected: () => boolean;\n    /**\n     * check whether the wallet is currently installed/available in the browser\n     */\n    getIsWalletInstalled: () => boolean;\n    /**\n     * @returns the primary account objects/strings\n     * @remarks If multiple accounts are connected, this is the last connected account\n     */\n    getPrimaryAccount: () => unknown;\n    /**\n     * @returns list of connected accounts objects/strings\n     */\n    getAccounts: () => unknown[];\n    /**\n     * @returns which chain id the wallet is currently connected to\n     * @remarks for most blockchains this is usually \"testnet\" or \"mainnet\" however for some blockchains such as Ethereum, \"chain\" can refer to \"Göerli\" or \"Rinkerby\" as well as \"mainnet\"\n     */\n    fetchCurrentChainID: () => Promise<string>;\n    /**\n     * mount event listeners for the current wallet which enables the wallet component to pick up events such as if the user changes accounts or if a new block has been updated\n     * @see WalletHookHandlerInterface\n     * @see HookEvent\n     * @see HookRouter\n     */\n    mountEventListeners: () => Promise<void>;\n    /**\n     * Converts the current internal state to a JSON object\n     * @remarks Used to prevent POM error as well as making the state persistent\n     * @example @see EthereumState\n     */\n    toJSON: () => T;\n}\n\n/**\n * Implement Wallet hooks for Wallets\n */\ninterface WalletHookHandlerInterface {\n    /**\n     * call hook when account changes. Either an account was removed or an account was added.\n     * will return a list accounts to compare the changes.\n     * @remarks this hook is also called when the wallet is initialized for the first time\n     */\n    onAccountChange: (cb: (accounts: unknown) => void | Promise<void>) => HookEvent;\n    /**\n     * call hook when the user signs out of all accounts either by calling @see signOut or by manually disconnecting from all accounts in their wallet.\n     * @remarks is not called when the user signs out of their account assuming there is another account available\n     */\n    onAccountDisconnect: (cb: () => void | Promise<void>) => HookEvent;\n    /**\n     * call hook when the user triggers a chain change event. Can use this hook to trigger a @see switchChainFromWallet to force the user to force the chain back to a\n     * predefined hook. Also see @see forceCurrentChainID to throw an error if the user attempts to sign a transaction on the wrong chain\n     * @remarks only available on certain chains/wallet. @see Metamask\n     */\n    onChainChange: (cb: (chainId: string) => void | Promise<void>) => HookEvent;\n    /**\n     * call hook whenever a new block is added to the blockchain\n     * @remarks right now only available for @see Ethereum as relies on the ethereum.on events an is not being polled.\n     */\n    onBlockAdded: (cb: (block: unknown) => void | Promise<void>) => HookEvent;\n}\n\n/**\n * Implement Wallet hooks for \"Chain Wallets\" or a higher level wallet that manages multiple wallets.\n * @remarks since this is a higher level component, the wallet id is pass into every callback that is wallet specific to allow more fine tuning\n */\ninterface ChainHookHandlerInterface<WalletType> {\n    /**\n     * call hook when account changes. Either an account was removed or an account was added.\n     * will return a list accounts to compare the changes.\n     * @remarks this hook is also called when the wallet is initialized for the first time\n     */\n    onAccountChange: (cb: (walletType: WalletType, accounts: unknown) => void | Promise<void>) => HookEvent;\n    /**\n     * call hook when the user signs out of all accounts either by calling @see signOut or by manually disconnecting from all accounts in their wallet.\n     * @remarks is not called when the user signs out of their account assuming there is another account available\n     */\n    onAccountDisconnect: (cb: (walletType: WalletType) => void | Promise<void>) => HookEvent;\n    /**\n     * call hook when the user triggers a chain change event. Can use this hook to trigger a @see switchChainFromWallet to force the user to force the chain back to a\n     * predefined hook. Also see @see forceCurrentChainID to throw an error if the user attempts to sign a transaction on the wrong chain\n     * @remarks only available on certain chains/wallet. @see Metamask\n     */\n    onChainChange: (cb: (walletType: WalletType, chainId: string) => void | Promise<void>) => HookEvent;\n\n    /**\n     * call hook whenever a new block is added to the blockchain\n     * @remarks right now only available for @see Ethereum as relies on the ethereum.on events an is not being polled.\n     * onBlockAdded is a chain and not a wallet specific event so wallet type is not required\n     */\n    onBlockAdded: (cb: (block: unknown) => void | Promise<void>) => HookEvent;\n}\n\n/**\n * Additional methods for Chain Wallets\n * Chain Wallets allow high level control over many wallets\n * @remarks does not include SuperWallet. @see SuperWallet\n */\ninterface ChainWalletInterface<Wallet, WalletType> {\n    init: () => Promise<WALLET_STATUS>;\n    getAvailableWallets: () => WalletType[];\n    getConnectedWallets: () => WalletType[];\n    getWallet: (type: WalletType) => Wallet;\n    getActiveWallet: () => Wallet;\n    updateActiveWallet: (type: WalletType) => Wallet;\n}\n\nexport { WalletInterface, ChainWalletInterface, WalletHookHandlerInterface, ChainHookHandlerInterface };\nexport type { Signer, Wallet, WALLET, ChainWallet, EVMBasedChain };\n","/**\n * Method or function is not implemented\n */\nclass NotImplementedError extends Error {\n    constructor(message = 'NotImplementedError') {\n        super(message);\n        this.name = 'NotImplementedError';\n    }\n}\n\n/**\n * Wallet method was invoked although wallet was not installed\n */\nclass WalletNotInstalledError extends Error {\n    constructor(message = 'WalletNotInstalledError') {\n        super(message);\n        this.name = 'WalletNotInstalledError';\n    }\n}\n\n/**\n * Wallet method was invoked although wallet was not connected\n */\nclass WalletNotConnectedError extends Error {\n    constructor(message = 'WalletNotConnectedError') {\n        super(message);\n        this.name = 'WalletNotConnectedError';\n    }\n}\n\n/**\n * Hook was registered with an event that is not supported\n */\nclass HookNotAvailableError extends Error {\n    constructor(message = 'HookNotAvailableError') {\n        super(message);\n        this.name = 'HookNotAvailableError';\n    }\n}\n\nexport { NotImplementedError, WalletNotInstalledError, WalletNotConnectedError, HookNotAvailableError };\n","export * from './metamask';\nexport * from './Ethereum';\nexport * from './walletconnect';\nexport * from './types';\n\nconst CHAIN_ETHEREUM = 'ETHEREUM';\nexport { CHAIN_ETHEREUM };\n","export * from './Metamask';\nexport * from './types';\n","import { ethers } from 'ethers';\nimport { NotImplementedError, WalletNotConnectedError, WalletNotInstalledError } from '~/src/errors';\nimport HookRouter from '~/src/utils/HookRouter/HookRouter';\nimport { WALLET_HOOK, WALLET_ID, WALLET_STATUS } from '~/src/utils/HookRouter/types';\nimport WalletStateStorage from '~/src/WalletStateStorage';\nimport { CHAIN_ETHEREUM, EthereumWalletType } from '..';\nimport { WALLET_TYPE } from '../../config/wallets';\nimport { useWindow } from '../../containers';\nimport { WalletHookHandlerInterface, WalletInterface } from '../../types';\nimport { getChainConfig } from '../chains';\nimport { MetamaskAsset, MetamaskChainConfig, MetamaskState } from './types';\n\nconst initialState: Readonly<MetamaskState> = Object.freeze({\n    accounts: [],\n    isConnected: false\n});\n\nclass Metamask implements WalletInterface<MetamaskState>, WalletHookHandlerInterface {\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.CHAIN_ON_CHANGE,\n        WALLET_HOOK.CHAIN_ON_DISCONNECT,\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.NEW_BLOCK\n    ]);\n    private _walletStorage: WalletStateStorage = new WalletStateStorage(CHAIN_ETHEREUM, WALLET_ID.ETHEREUM_METAMASK);\n    private chain: string | null = null;\n    private _state: MetamaskState;\n    private _ethereum: any;\n    public provider?: ethers.providers.Web3Provider;\n    public name = 'METAMASK';\n    public type: EthereumWalletType = WALLET_TYPE.ETHEREUM_METAMASK;\n\n    constructor(state?: MetamaskState) {\n        if (state) {\n            this._state = { ...state };\n        } else {\n            this._state = { ...initialState };\n        }\n\n        this._setupInitialState();\n    }\n\n    private async _getProvider(): Promise<ethers.providers.Web3Provider> {\n        if (this.provider) return this.provider;\n\n        if (!this._ethereum) {\n            throw new WalletNotInstalledError();\n        }\n\n        return new ethers.providers.Web3Provider(this._ethereum, \"any\");\n    }\n\n    private _enforceIsConnected(): void {\n        if (!this.getIsConnected()) {\n            throw new WalletNotConnectedError();\n        }\n    }\n\n    private async _enforceChain(): Promise<void> {\n        if (this.chain === null) return;\n\n        const provider = await this._getProvider();\n        const currentChain: string = await provider.send('eth_chainId', []);\n\n        if (currentChain !== this.chain) {\n            throw new Error(`Chain has changed to ${currentChain} when it should be ${this.chain}`);\n        }\n    }\n\n    private _setupInitialState() {\n        const storageValue = this._walletStorage.getValue();\n\n        if (storageValue) {\n            this._state = {\n                isConnected: storageValue.isConnected,\n                accounts: storageValue.accounts\n            };\n        }\n    }\n\n    private _updateWalletStorageValue() {\n        if (this._state.isConnected && this._state.accounts.length > 0) {\n            this._walletStorage.updateValue(true, this.getPrimaryAccount(), this._state.accounts);\n        } else {\n            this._walletStorage.updateValue(false, '', []);\n        }\n    }\n\n    public async init(): Promise<WALLET_STATUS> {\n        this.provider = await this._getProvider();\n\n        return WALLET_STATUS.OK;\n    }\n\n    public async signIn(): Promise<WALLET_STATUS> {\n        const provider = await this._getProvider();\n        this._state.accounts = await provider.send('eth_requestAccounts', []);\n        this._state.isConnected = this._state.accounts.length > 0;\n\n        this._updateWalletStorageValue();\n\n        this.hookRouter.applyHookWithArgs(WALLET_HOOK.ACCOUNT_ON_CHANGE, this._state.accounts);\n        return WALLET_STATUS.OK;\n    }\n\n    public async signOut(): Promise<WALLET_STATUS> {\n        this._state.accounts = [];\n        this._state.isConnected = false;\n\n        this._updateWalletStorageValue();\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n\n        if (!this.getIsConnected()) return WALLET_STATUS.WALLET_ERROR;\n        return WALLET_STATUS.OK;\n    }\n\n    public async getSigner(): Promise<ethers.providers.JsonRpcSigner> {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        const provider = this.provider || (await this._getProvider());\n\n        return provider.getSigner();\n    }\n\n    public async getBalance(): Promise<string> {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        const provider = this.provider || (await this._getProvider());\n        const balance = await provider.getBalance(this._state.accounts[0]);\n        return balance.toString();\n    }\n\n    public async getAssets(): Promise<MetamaskAsset[]> {\n        throw new NotImplementedError();\n    }\n\n    public getIsConnected(): boolean {\n        return this._state.isConnected;\n    }\n\n    public getIsWalletInstalled(): boolean {\n        const ethereum = useWindow((windowObject) => (windowObject as { ethereum?: unknown }).ethereum) as any;\n\n        if (!ethereum) return false;\n\n        // Metamask and Coinbase/Other Wallet are both installed\n        // Choose the correct injected wallet\n        if (\"providers\" in ethereum && ethereum.providers?.length) {\n            for (let p of ethereum.providers) {\n                if (p.isMetaMask) {\n                    this._ethereum = p;\n                    return true;\n                }\n            }\n        } else {\n            if (ethereum.isMetaMask) {\n                // Force [disable extension/disable overriding Metamask option] of Coin98 Wallet before Metamask can be used\n                if (!(\"isCoin98\" in ethereum && ethereum.isCoin98)) {\n                    this._ethereum = ethereum;\n                    return true;\n                }\n            }\n        }\n\n        // Force signout to prevent errors when other wallets intercept Metamask\n        this.signOut();\n\n        return false;\n    }\n\n    public getPrimaryAccount(): string {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        return this._state.accounts[0];\n    }\n\n    public getAccounts(): string[] {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        return this._state.accounts;\n    }\n\n    public async fetchCurrentChainID(): Promise<string> {\n        const provider: ethers.providers.Web3Provider = await this._getProvider();\n        const chainId = await provider.send('eth_chainId', []);\n\n        return chainId;\n    }\n\n    public async addChainToWallet(chainConfig: MetamaskChainConfig): Promise<void> {\n        return this._ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [chainConfig]\n        });\n    }\n\n    public async switchChainFromWallet(chain: number) {\n        if (this._ethereum.networkVersion !== chain) {\n            try {\n                await this._ethereum.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: `0x${chain}` }]\n                });\n            } catch (err) {\n                if (err && (err as { code: number }).code === 4902) {\n                    const chainConfig = await getChainConfig(chain);\n                    await this.addChainToWallet(chainConfig as MetamaskChainConfig);\n                } else {\n                    throw err;\n                }\n            }\n        }\n    }\n\n    public async forceCurrentChainID(chain: number): Promise<void> {\n        if (this.chain !== null && this.chain !== `0x${chain}`) {\n            throw new Error(`Cannot force chain to be 0x${chain} because it is already forced to be 0x${this.chain}`);\n        }\n\n        this.chain = `0x${chain}`;\n        this.switchChainFromWallet(chain);\n    }\n\n    public onAccountChange = (cb: (accounts: string[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n    };\n\n    public onChainChange = (cb: (chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n    };\n\n    public onAccountDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, cb);\n    };\n\n    public onChainDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_DISCONNECT, cb);\n    };\n\n    public onBlockAdded = (cb: (newBlock: number) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.NEW_BLOCK, (block: number) => {\n            return cb(block);\n        });\n    };\n\n    public toJSON(): MetamaskState {\n        return this._state;\n    }\n\n    /**\n     * Mounts ethereum based event hooks to the hook router\n     * @see https://eips.ethereum.org/EIPS/eip-1193#references for list of ethereum hooks\n     */\n    public async mountEventListeners(): Promise<void> {\n        const provider = await this._getProvider();\n        if (this._ethereum && this._ethereum.on) {\n            this._ethereum.on('accountsChanged', async (accounts: string[]) => {\n                this._state.accounts = accounts;\n\n                if (accounts.length === 0) {\n                    await this.signOut();\n                    this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n                } else {\n                    this.hookRouter.applyHookWithArgs(WALLET_HOOK.ACCOUNT_ON_CHANGE, accounts);\n                }\n                this._updateWalletStorageValue();\n            });\n\n            this._ethereum.on('chainChanged', async (chainId: string) => {\n                this.hookRouter.applyHookWithArgs(WALLET_HOOK.CHAIN_ON_CHANGE, chainId);\n            });\n\n            this._ethereum.on('disconnect', async (err: Error) => {\n                console.warn(`Metamask Disconnected. Error:`);\n                console.warn(err);\n                this.hookRouter.applyHooks([WALLET_HOOK.CHAIN_ON_DISCONNECT]);\n            });\n        }\n\n        provider.on('block', (block: number) => {\n            this.hookRouter.applyHookWithArgs(WALLET_HOOK.NEW_BLOCK, block);\n        });\n    }\n\n    public async unmountEventListeners() {\n        const provider = await this._getProvider();\n        provider.removeAllListeners();\n    }\n\n    public async getProvider(): Promise<ethers.providers.Web3Provider> {\n        await this._enforceChain();\n\n        return this._getProvider();\n    }\n}\n\nexport { Metamask };\n","import { HookNotAvailableError } from '../../errors';\nimport { HookEvent, WALLET_HOOK } from './types';\n\n/**\n * Handles callback hooks for wallet/ chain events\n * @see WALLET_HOOK for available hooks\n * @remarks Should only be used internally as this component is prone to changing\n * @internal\n * @example\n * ```ts\n * const hookRouter = new HookRouter([WALLET_HOOK.NEW_BLOCK]); // init hook router\n * hookRouter.registerCallback(WALLET_HOOK.NEW_BLOCK, () => console.log(\"hello hook!\")); // create a new hook\n * hookRouter.applyHooks([WALLET_HOOK.NEW_BLOCK]); // >> hello hook!\n * ```\n */\nclass HookRouter {\n    private availableHooks: WALLET_HOOK[];\n    private hooks: Map<WALLET_HOOK, Map<symbol, Function>>;\n\n    /**\n     * Initializes the hook router to start listening for hooks\n     * @param hooks - List of hooks the HookRouter should listen for\n     */\n    constructor(hooks: WALLET_HOOK[]) {\n        this.hooks = new Map();\n        this.availableHooks = hooks;\n\n        this.resetAllHooks();\n    }\n\n    /**\n     * Check if hook router is listening to a hook\n     * @param hook - hook enum\n     */\n    private checkIfValidHook(hook: WALLET_HOOK) {\n        if (!this.hooks.has(hook)) {\n            throw new HookNotAvailableError();\n        }\n    }\n\n    /**\n     * self descriptive\n     * @returns list of available hooks\n     */\n    public getAvailableHooks() {\n        return [...this.availableHooks];\n    }\n\n    /**\n     * clear all hooks registered to an event\n     * @param hook - hook enum\n     */\n    public resetHook(hook: WALLET_HOOK) {\n        this.checkIfValidHook(hook);\n\n        this.hooks.delete(hook);\n        this.hooks.set(hook, new Map());\n    }\n\n    /**\n     * clears all available hooks resetting the hook router\n     */\n    public resetAllHooks() {\n        this.availableHooks.forEach((hook) => {\n            this.hooks.set(hook, new Map());\n        });\n    }\n\n    /**\n     * Register a new hook that will be called when the hook event is triggered\n     * @param hook - hook enum\n     * @param cb - callback to invoke when the hook is called\n     * @returns a hook event\n     * @see HookEvent\n     * @see applyHooks\n     * @remarks if a hook is expecting to be called with an argument, use @see applyHookWithArgs\n     */\n    public registerCallback(hook: WALLET_HOOK, cb: Function): HookEvent {\n        this.checkIfValidHook(hook);\n\n        const id = Symbol();\n        this.hooks.get(hook)?.set(id, cb);\n\n        return {\n            id,\n            destroy: () => this.deregisterCallback(hook, id)\n        };\n    }\n\n    /**\n     * Deregisters a particular hook\n     * @param hook - hook enum\n     * @param id - hook id found in the @see HookEvent\n     * @remarks hooks can also be deregistered using the @see HookEvent.destroy method\n     */\n    public deregisterCallback(hook: WALLET_HOOK, id: symbol) {\n        this.checkIfValidHook(hook);\n\n        this.hooks.get(hook)?.delete(id);\n    }\n\n    /**\n     * Calls all hooks that are specified\n     * @param hooks - list of hook enums\n     * @remarks Use @see applyHookWithArgs if hooks should be called with args\n     */\n    public async applyHooks(hooks: WALLET_HOOK[]): Promise<void> {\n        const callbacksToInvoke: Function[] = [];\n\n        hooks.forEach((hook) => {\n            this.hooks.get(hook)?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n        });\n\n        await Promise.all(callbacksToInvoke.map((fn) => fn()));\n    }\n\n    /**\n     * Calls a hook with a list of arguments\n     * @param hook - hook enum\n     * @param args - argument to pass to the hook callback\n     * @remarks args are destructured\n     */\n    public async applyHookWithArgs(hook: WALLET_HOOK, ...args: any[]): Promise<void> {\n        const callbacksToInvoke: Function[] = [];\n\n        this.hooks.get(hook)?.forEach((fn: Function) => callbacksToInvoke.push(fn));\n\n        await Promise.all(callbacksToInvoke.map((fn) => fn(...args)));\n    }\n}\n\nexport default HookRouter;\n","/**\n * Wallet statuses\n */\nenum WALLET_STATUS {\n    /**\n     * Wallet is OK\n     */\n    OK,\n    /**\n     * There was a problem logging in\n     * @remarks user may have cancelled the transaction\n     */\n    LOGIN_ERROR,\n    /**\n     * There was a problem initializing the wallet\n     */\n    WALLET_ERROR,\n    /**\n     * There was a problem initializing the  wallet because the extension was not found\n     */\n    EXTENSION_NOT_FOUND,\n    /**\n     * The Wallet account was not found\n     */\n    ACCOUNT_NOT_FOUND\n}\n\n/**\n * Identifier for Wallet\n * @remarks example Metamask, WalletConnect, etc...\n * sorting should be same as WALLET_TYPE\n */\nenum WALLET_ID {\n    ETHEREUM_METAMASK = 0,\n    ETHEREUM_WALLETCONNECT = 1,\n    ALGORAND_MYALGO = 2,\n    ALGORAND_WALLETCONNECT = 3,\n    ALGORAND_PERAWALLET = 4\n}\n\n/**\n * Wallet Hook events\n * @remarks events are based on Metamask\n */\nenum WALLET_HOOK {\n    /**\n     * User has prompted to change chains on the wallet\n     */\n    CHAIN_ON_CHANGE,\n    CHAIN_ON_DISCONNECT,\n    ACCOUNT_ON_CHANGE,\n    ACCOUNT_ON_DISCONNECT,\n    NEW_BLOCK,\n    CONNECT\n}\n\ntype HookEvent = {\n    destroy: () => void;\n    id: symbol;\n};\n\nexport { WALLET_HOOK, WALLET_STATUS, WALLET_ID };\nexport type { HookEvent };\n","import { isValidAddress } from 'algosdk';\nimport { isAddress } from 'ethers/lib/utils';\nimport { CHAIN_ALGORAND } from './algorand';\nimport { useWindow } from './containers';\nimport { CHAIN_ETHEREUM } from './ethereum';\nimport { WALLET_ID } from './utils/HookRouter/types';\n\n/**\n * Schema for Storage\n */\ntype StorageValue = {\n    isConnected: boolean;\n    connectedAccount: string;\n    chain: string;\n    walletId: WALLET_ID;\n    accounts: string[];\n};\n\nconst STORAGE_KEY = 'wallet-state-storage';\n\n/**\n *  Wallet Storage is used to make the wallet state persistent even after the user refreshes the page\n *  @remarks uses the Web Storage API and may not be compatible with older browsers\n *  Maybe be replaced with less coupled implementation in the future\n */\nclass WalletStateStorage {\n    private chain: string;\n    private storage: Storage | null;\n    private walletId: WALLET_ID;\n\n    /**\n     * Constructor for storage\n     * @param chain - The chain identifier to use as key\n     * @param walletId - Current wallet ID\n     */\n    constructor(chain: string, walletId: WALLET_ID) {\n        this.chain = chain;\n        this.walletId = walletId;\n        this.storage = this._storage();\n    }\n\n    /**\n     * gets the content of the storage per walletid\n     * @returns the storage value for chain\n     */\n    public getValue(): StorageValue | null {\n        const value =\n            this.values().find((state) => state.chain === this.chain && this.walletId == state.walletId) || null;\n\n        if (value && !this.isValidAddress(value.connectedAccount)) {\n            return {\n                isConnected: false,\n                connectedAccount: '',\n                chain: this.chain,\n                walletId: this.walletId,\n                accounts: value.accounts\n            };\n        }\n\n        return value;\n    }\n\n    /**\n     * Updates the values saved in storage\n     * @param isConnected - storage value to save\n     * @param connectedAccount  - storage value to save\n     * @param accounts  - storage value to save\n     */\n    public updateValue(isConnected: boolean, connectedAccount: string, accounts: string[]): void {\n        const exisitingValues = this.getValue();\n        let values = this.values();\n\n        if (exisitingValues) {\n            values = values.map((value) => {\n                if (value.chain === this.chain && value.walletId === this.walletId) {\n                    return {\n                        chain: this.chain,\n                        isConnected,\n                        connectedAccount,\n                        walletId: this.walletId,\n                        accounts\n                    };\n                }\n                return value;\n            });\n        } else {\n            values = values.concat({\n                chain: this.chain,\n                isConnected,\n                connectedAccount,\n                walletId: this.walletId,\n                accounts\n            });\n        }\n\n        this.storage?.setItem(STORAGE_KEY, JSON.stringify(values));\n    }\n\n    /**\n     * Validates the account string using respective chain methods\n     * @param account - account string to check\n     * @returns is account string valid\n     */\n    private isValidAddress(account: string): boolean {\n        switch (this.chain) {\n            case CHAIN_ETHEREUM:\n                return isAddress(account);\n            case CHAIN_ALGORAND:\n                return isValidAddress(account);\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * parse raw value\n     * @returns parsed values\n     */\n    private values(): StorageValue[] {\n        const values = this._storage()?.getItem(STORAGE_KEY);\n        return values ? JSON.parse(values) : [];\n    }\n\n    private _storage(): Storage | null {\n        return useWindow((windowObject) => (windowObject as any).localStorage);\n    }\n}\n\nexport default WalletStateStorage;\n\nexport type { StorageValue };\n","export * from './myalgo';\nexport * from './Algorand';\nexport * from './walletconnect';\nexport * from './perawallet';\nexport * from './types';\n\nconst CHAIN_ALGORAND = 'ALGORAND';\nexport { CHAIN_ALGORAND };\n","export * from './MyAlgo';\nexport * from './types';\n","import MyAlgoConnect, { Accounts, AlgorandTxn, EncodedTransaction, SignedTx } from '@randlabs/myalgo-connect';\nimport { NotImplementedError, WalletNotConnectedError } from '~/src/errors';\nimport HookRouter from '~/src/utils/HookRouter/HookRouter';\nimport { HookEvent, WALLET_HOOK, WALLET_ID, WALLET_STATUS } from '~/src/utils/HookRouter/types';\nimport WalletStateStorage from '~/src/WalletStateStorage';\nimport { AlgorandSignerTxn, AlgorandWalletType, CHAIN_ALGORAND } from '..';\nimport { WALLET_TYPE } from '../../config/wallets';\nimport { WalletHookHandlerInterface, WalletInterface } from './../../types';\nimport { MyAlgoAsset, MyAlgoSigner, MyAlgoState } from './types';\n\ntype MyAlgoConfig = {\n    shouldSelectOneAccount?: boolean;\n};\n\ntype MyAlgoTransaction = AlgorandTxn[] | EncodedTransaction[];\n\nconst initialState: Readonly<MyAlgoState> = Object.freeze({\n    accounts: [],\n    isConnected: false\n});\n\nclass MyAlgo implements WalletInterface<MyAlgoState>, WalletHookHandlerInterface {\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.CHAIN_ON_CHANGE\n    ]);\n    private _state: MyAlgoState;\n    private provider: MyAlgoConnect | undefined;\n    private walletStorage: WalletStateStorage = new WalletStateStorage(CHAIN_ALGORAND, WALLET_ID.ALGORAND_MYALGO);\n    public currentActiveAccountAddress = '';\n\n    public type: AlgorandWalletType = WALLET_TYPE.ALGORAND_MYALGO;\n    public name = 'ALGORAND_MYALGO';\n\n    constructor(state?: MyAlgoState) {\n        if (state) {\n            this._state = { ...state };\n        } else {\n            this._state = { ...initialState };\n        }\n\n        this.setupInitialState();\n    }\n\n    private enforceIsConnected(): void {\n        if (!this.getIsConnected()) {\n            throw new WalletNotConnectedError();\n        }\n    }\n\n    public async init(): Promise<WALLET_STATUS> {\n        return WALLET_STATUS.OK;\n    }\n\n    public getProvider(): MyAlgoConnect {\n        if (this.provider instanceof MyAlgoConnect) {\n            return this.provider;\n        }\n\n        this.provider = new MyAlgoConnect();\n        return this.provider;\n    }\n\n    public switchAccount(address: string) {\n        const account = this._state.accounts.find((acc) => acc.address === address);\n\n        if (account) {\n            this.currentActiveAccountAddress = account.address;\n        }\n\n        this.updateWalletStorageValue();\n    }\n\n    private setupInitialState() {\n        const storageValue = this.walletStorage.getValue();\n\n        if (storageValue) {\n            this._state = {\n                isConnected: storageValue.isConnected,\n                accounts: storageValue.accounts\n                    ? storageValue.accounts.map((address) => ({\n                          name: '',\n                          address\n                      }))\n                    : []\n            };\n\n            this.currentActiveAccountAddress = storageValue.connectedAccount;\n        }\n    }\n\n    private updateWalletStorageValue() {\n        if (this._state.isConnected && this._state.accounts.length > 0) {\n            const accounts = this.getAccounts().map((acc) => acc.address);\n            const connectedAccount = this.getPrimaryAccount().address;\n            this.walletStorage.updateValue(true, connectedAccount, accounts);\n        } else {\n            this.walletStorage.updateValue(false, '', []);\n        }\n    }\n\n    public async signIn(): Promise<WALLET_STATUS> {\n        const myAlgoConnect = this.getProvider();\n\n        // forces user to only choose one account.\n        // This prevents a lot of edge cases.\n        this._state.accounts = await myAlgoConnect.connect();\n\n        this._state.isConnected = this._state.accounts.length > 0;\n\n        this.updateWalletStorageValue();\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n        return WALLET_STATUS.OK;\n    }\n\n    public async signOut(): Promise<WALLET_STATUS> {\n        this.enforceIsConnected();\n        this._state.accounts = [];\n        this._state.isConnected = false;\n        this.updateWalletStorageValue();\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n        return WALLET_STATUS.OK;\n    }\n\n    public async getSigner(): Promise<MyAlgoSigner> {\n        return async (transactions: AlgorandSignerTxn): Promise<SignedTx[]> => {\n            this.enforceIsConnected();\n\n            const myAlgoConnect = this.getProvider();\n            const signedTx = await myAlgoConnect.signTransaction(transactions as MyAlgoTransaction);\n\n            return signedTx;\n        };\n    }\n\n    public async getBalance(): Promise<string> {\n        throw new NotImplementedError();\n    }\n\n    public async getAssets(): Promise<MyAlgoAsset[]> {\n        throw new NotImplementedError();\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return true; // wallet is web only so is always installed\n    }\n\n    public getIsConnected(): boolean {\n        return this._state.isConnected;\n    }\n\n    public getPrimaryAccount(): Accounts {\n        if (!this.getIsConnected()) {\n            return {\n                name: '',\n                address: ''\n            };\n        }\n\n        const account = this._state.accounts.find((acc) => acc.address === this.currentActiveAccountAddress);\n\n        if (this.currentActiveAccountAddress && account) {\n            return account;\n        }\n\n        return this._state.accounts[0];\n    }\n\n    public getAccounts(): Accounts[] {\n        return this._state.accounts;\n    }\n\n    public async fetchCurrentChainID(): Promise<string> {\n        return '0x1';\n    }\n\n    public async mountEventListeners(): Promise<void> {\n        return;\n    }\n\n    public onAccountChange = (cb: (accounts: Accounts[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, () => {\n            return cb(this.getAccounts());\n        });\n    };\n\n    public onAccountDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, () => {\n            return cb();\n        });\n    };\n\n    public onChainChange = (cb: (chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, async () => {\n            const currentChainId = await this.fetchCurrentChainID();\n            return cb(currentChainId);\n        });\n    };\n\n    public onBlockAdded = (_cb: (newBlock: unknown) => void | Promise<void>): HookEvent => {\n        throw new NotImplementedError();\n    };\n\n    public toJSON(): MyAlgoState {\n        return this._state;\n    }\n\n    /**\n     * DANGER - REFRAIN from using in production as can have some unintended side effect. NOT FULLY SUPPORTED!\n     * @param data - New State for wallet\n     */\n    public _dangerouslyUpdateInternalState(data: MyAlgoState) {\n        console.warn(\n            `WARNING - You are about to update the internal state for ${this.name}!! Functionality may not work correctly...`\n        );\n        this._state = data;\n    }\n}\n\nexport { MyAlgo };\nexport type { MyAlgoConfig, MyAlgoTransaction };\n","/**\n * Wallet types representing low level wallets\n */\nenum WALLET_TYPE {\n    ETHEREUM_METAMASK,\n    ETHEREUM_WALLETCONNECT,\n    ALGORAND_MYALGO,\n    ALGORAND_WALLETCONNECT,\n    ALGORAND_PERAWALLET\n}\n\n/**\n * Chain types representing blockchains above @see WALLET_TYPE are associated to\n */\nenum CHAIN_TYPE {\n    ALGORAND,\n    ETHEREUM\n}\n\nexport { WALLET_TYPE, CHAIN_TYPE };\n","import { Accounts, SignedTx } from '@randlabs/myalgo-connect';\nimport { Signer as RootSigner } from '~/src/types';\nimport { AlgorandSignerTxn } from '../types';\n\n/**\n * State for Myalgo Wallet\n */\ntype MyAlgoState = {\n    accounts: Accounts[];\n    isConnected: boolean;\n};\n\n/**\n * Signer for Myalgo Wallet\n */\ntype MyAlgoSigner = RootSigner<AlgorandSignerTxn, SignedTx>;\n\n/**\n * Myalgo Assets\n */\ntype MyAlgoAsset = {\n    chainId: string;\n    name: string;\n    unit_name: string;\n    id: string;\n    sourceDecimals: number;\n};\n\nexport type { MyAlgoState, MyAlgoSigner, MyAlgoAsset };\n","import { Accounts } from '@randlabs/myalgo-connect';\nimport { CHAIN_TYPE, WALLET_TYPE } from '../config/wallets';\nimport { NotImplementedError } from '../errors';\nimport { ChainHookHandlerInterface, ChainWalletInterface, WalletInterface } from '../types';\nimport HookRouter from '../utils/HookRouter';\nimport { WALLET_HOOK, WALLET_STATUS } from '../utils/HookRouter/types';\nimport { MyAlgo } from './myalgo';\nimport { PeraWallet } from './perawallet';\nimport { AlgorandConfig, AlgorandSigner, AlgorandState, AlgorandWallet, AlgorandWalletType } from './types';\nimport { WalletConnect } from './walletconnect';\n\n/**\n * Default config\n */\nconst defaultAlgorandConfig: AlgorandConfig = {\n    hookType: 'active',\n    defaultWallet: WALLET_TYPE.ALGORAND_MYALGO\n};\n\n/***\n * Algorand Chain Wallet used to manage algorand wallets and invoke algorand transactions\n */\nclass Algorand\n    implements\n        WalletInterface<unknown>,\n        ChainWalletInterface<AlgorandWallet, AlgorandWalletType>,\n        ChainHookHandlerInterface<AlgorandWalletType>\n{\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.CHAIN_ON_CHANGE,\n        WALLET_HOOK.CHAIN_ON_DISCONNECT,\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.NEW_BLOCK\n    ]);\n\n    private _myAlgo: MyAlgo;\n    private _walletConnect: WalletConnect;\n    private _peraWallet: PeraWallet;\n    private _initialized = false;\n    private _activeWallets: AlgorandWalletType[] = [];\n    private _config: AlgorandConfig;\n\n    public type: CHAIN_TYPE = CHAIN_TYPE.ALGORAND;\n    public name = 'ALGORAND';\n\n    /**\n     * Constructor for Algorand\n     * @param config - Partial Algorand Config to be overwritten with defaults\n     * @param data - Algorand Data to initialize with\n     */\n    constructor(config: Partial<AlgorandConfig>, data?: AlgorandState) {\n        this._myAlgo = new MyAlgo(data?.myAlgo);\n        this._walletConnect = new WalletConnect(data?.walletConnect);\n        this._peraWallet = new PeraWallet(data?.peraWallet);\n        this._config = { ...defaultAlgorandConfig, ...config };\n    }\n\n    /**\n     * Register a wallet as active\n     * @param type - Wallet type\n     */\n    private _registerActiveWallet = (type: AlgorandWalletType): void => {\n        this._activeWallets.unshift(type);\n    };\n\n    /**\n     * Deregister a new wallet from active\n     * @param type - Wallet type\n     */\n    private _deregisterActiveWallet = (type: AlgorandWalletType): void => {\n        this._activeWallets = this._activeWallets.filter((elem) => elem !== type);\n    };\n\n    /**\n     * Mount internal hooks that make managing active wallet possible\n     * @param wallet - wallet type\n     */\n    private _mountInternalHooks = (wallet: AlgorandWallet) => {\n        const verifyWallet = (walletType: AlgorandWalletType) => {\n            switch (this._config.hookType) {\n                case 'active':\n                    return this._activeWallets[0] === walletType;\n                case 'all':\n                    return true;\n                default:\n                    return false;\n            }\n        };\n\n        const hook =\n            (hookType: WALLET_HOOK) =>\n            (...args: unknown[]) => {\n                if (!verifyWallet(wallet.type)) {\n                    return;\n                }\n                this.hookRouter.applyHookWithArgs(hookType, ...[wallet.type, ...args]);\n            };\n\n        const onAccountChange = (accounts: Accounts[]) => {\n            if (accounts.length < 1) {\n                this._deregisterActiveWallet(wallet.type);\n            } else {\n                this._registerActiveWallet(wallet.type);\n            }\n        };\n\n        const onAccountDisconnect = () => {\n            this._deregisterActiveWallet(wallet.type);\n        };\n\n        wallet.onAccountChange(hook(WALLET_HOOK.ACCOUNT_ON_CHANGE));\n        wallet.onAccountDisconnect(hook(WALLET_HOOK.ACCOUNT_ON_DISCONNECT));\n        wallet.onChainChange(hook(WALLET_HOOK.CHAIN_ON_CHANGE));\n\n        wallet.onAccountChange(onAccountChange);\n        wallet.onAccountDisconnect(onAccountDisconnect);\n    };\n\n    /**\n     * Internally initialize wallet\n     * @param algoWallet - wallet\n     */\n    private _initAlgorandWallet = async (algoWallet: AlgorandWallet): Promise<void> => {\n        if (algoWallet.getIsWalletInstalled()) {\n            await algoWallet.init();\n            await this._mountInternalHooks(algoWallet);\n        } else {\n            console.warn('Selected algorand wallet is not currently installed...');\n        }\n    };\n\n    /**\n     * Initializes the chain wallet\n     * @returns wallet status\n     * @remarks Should be called separately from constructor\n     */\n    public async init(): Promise<WALLET_STATUS> {\n        if (this._initialized) {\n            return WALLET_STATUS.OK;\n        }\n\n        this._initialized = true;\n        await Promise.all([this._myAlgo, this._walletConnect, this._peraWallet].map(this._initAlgorandWallet));\n\n        return WALLET_STATUS.OK;\n    }\n\n    public getWallet(type: AlgorandWalletType): AlgorandWallet {\n        switch (type) {\n            case WALLET_TYPE.ALGORAND_MYALGO:\n                return this._myAlgo;\n            case WALLET_TYPE.ALGORAND_WALLETCONNECT:\n                return this._walletConnect;\n            case WALLET_TYPE.ALGORAND_PERAWALLET:\n                return this._peraWallet;\n            default:\n                throw new Error(`Wallet type ${type} cannot be found`);\n        }\n    }\n\n    public getAvailableWallets(): AlgorandWalletType[] {\n        const walletTypes: AlgorandWalletType[] = [\n            WALLET_TYPE.ALGORAND_MYALGO,\n            WALLET_TYPE.ALGORAND_PERAWALLET,\n            WALLET_TYPE.ALGORAND_WALLETCONNECT\n        ];\n\n        return walletTypes.filter((walletType) => this.getWallet(walletType).getIsWalletInstalled());\n    }\n\n    public getConnectedWallets(): AlgorandWalletType[] {\n        const walletTypes: AlgorandWalletType[] = [\n            WALLET_TYPE.ALGORAND_MYALGO,\n            WALLET_TYPE.ALGORAND_PERAWALLET,\n            WALLET_TYPE.ALGORAND_WALLETCONNECT\n        ];\n\n        return walletTypes.filter((walletType) => this.getWallet(walletType).getIsConnected());\n    }\n\n    public getActiveWallet(): AlgorandWallet {\n        if (this._activeWallets.length === 0) {\n            return this.getWallet(this._config.defaultWallet); // Get default wallet\n        }\n        return this.getWallet(this._activeWallets[0]);\n    }\n\n    public updateActiveWallet(type: AlgorandWalletType): AlgorandWallet {\n        this._registerActiveWallet(type);\n        return this.getWallet(type);\n    }\n\n    public signIn(): Promise<WALLET_STATUS> {\n        return this.getActiveWallet().signIn();\n    }\n\n    public signOut(): Promise<WALLET_STATUS> {\n        return this.getActiveWallet().signOut();\n    }\n\n    public getSigner(): Promise<AlgorandSigner> {\n        return this.getActiveWallet().getSigner();\n    }\n\n    public getBalance(): Promise<string> {\n        return this.getActiveWallet().getBalance();\n    }\n\n    public getProvider(): unknown {\n        return this.getActiveWallet().getProvider();\n    }\n\n    public getIsConnected(): boolean {\n        return this.getActiveWallet().getIsConnected();\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return this.getActiveWallet().getIsWalletInstalled();\n    }\n\n    public getPrimaryAccount(): Accounts {\n        return this.getActiveWallet().getPrimaryAccount();\n    }\n\n    public getAccounts(): Accounts[] {\n        return this.getActiveWallet().getAccounts();\n    }\n\n    public fetchCurrentChainID(): Promise<string> {\n        return this.getActiveWallet().fetchCurrentChainID();\n    }\n\n    public mountEventListeners(): Promise<void> {\n        throw new NotImplementedError();\n    }\n\n    public onAccountChange = (cb: (walletType: AlgorandWalletType, accounts: Accounts[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n    };\n\n    public onChainChange = (cb: (walletType: AlgorandWalletType, chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n    };\n\n    public onAccountDisconnect = (cb: (walletType: AlgorandWalletType) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, cb);\n    };\n\n    public onBlockAdded = (_cb: (newBlock: number) => void | Promise<void>) => {\n        throw new NotImplementedError();\n    };\n\n    public toJSON(): unknown {\n        throw new NotImplementedError();\n    }\n}\n\nexport { Algorand, defaultAlgorandConfig };\n","import HookRouter from './HookRouter';\n\nexport default HookRouter;\n","export * from './PeraWallet';\nexport * from './types';\n","import { formatJsonRpcRequest } from '@json-rpc-tools/utils';\nimport { PeraWalletConnect } from '@perawallet/connect';\nimport { SignedTx } from '@randlabs/myalgo-connect';\nimport { NotImplementedError, WalletNotConnectedError } from '~/src/errors';\nimport { WalletHookHandlerInterface, WalletInterface } from '~/src/types';\nimport HookRouter from '~/src/utils/HookRouter/HookRouter';\nimport { HookEvent, WALLET_HOOK, WALLET_ID, WALLET_STATUS } from '~/src/utils/HookRouter/types';\nimport WalletStateStorage from '~/src/WalletStateStorage';\nimport { AlgorandSignerTxn, AlgorandWalletType, CHAIN_ALGORAND } from '..';\nimport { WALLET_TYPE } from '../../config/wallets';\nimport { PeraWalletAsset, PeraWalletSigner, PeraWalletState } from './types';\n\ntype Accounts = {\n    address: string;\n    name: string;\n};\n\ntype PeraWalletTransaction = Uint8Array[];\n\nconst initialState: Readonly<PeraWalletState> = Object.freeze({\n    accounts: [],\n    isConnected: false\n});\n\nclass PeraWallet implements WalletInterface<PeraWalletState>, WalletHookHandlerInterface {\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.CHAIN_ON_CHANGE\n    ]);\n    private _state: PeraWalletState;\n    private provider: PeraWalletConnect | undefined;\n    private walletStorage = new WalletStateStorage(CHAIN_ALGORAND, WALLET_ID.ALGORAND_PERAWALLET);\n\n    public type: AlgorandWalletType = WALLET_TYPE.ALGORAND_PERAWALLET;\n    public name = 'ALGORAND_PERAWALLET';\n\n    constructor(state?: PeraWalletState) {\n        if (state) {\n            this._state = { ...state };\n        } else {\n            this._state = { ...initialState };\n        }\n\n        this._setupInitialState();\n    }\n\n    private _enforceIsConnected(): void {\n        if (!this.getIsConnected()) {\n            throw new WalletNotConnectedError();\n        }\n    }\n\n    private _setupInitialState() {\n        const storageValue = this.walletStorage.getValue();\n\n        if (storageValue) {\n            this._state = {\n                isConnected: this.getIsConnected(),\n                accounts: storageValue.accounts.map((account) => ({\n                    name: '',\n                    address: account\n                }))\n            };\n        }\n    }\n\n    private _updateWalletStorageValue() {\n        if (this._state.isConnected && this._state.accounts.length > 0) {\n            const accounts = this.getAccounts().map((acc) => acc.address);\n            const connectedAccount = this.getPrimaryAccount().address;\n            this.walletStorage.updateValue(true, connectedAccount, accounts);\n        } else {\n            this.walletStorage.updateValue(false, '', []);\n        }\n    }\n\n    public async init(): Promise<WALLET_STATUS> {\n        return WALLET_STATUS.OK;\n    }\n\n    public async signIn(): Promise<WALLET_STATUS> {\n        this.provider = this.getProvider();\n        const accounts = await this.provider.connect();\n\n        this._state.accounts = accounts.map((account) => ({\n            name: '',\n            address: account\n        }));\n        this._state.isConnected = Array.isArray(accounts) && accounts.length > 0;\n        this._updateWalletStorageValue();\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n\n        this.provider?.connector?.on('disconnect', (error, _payload) => {\n            if (error) {\n                throw error;\n            }\n\n            this.signOut();\n        });\n\n        return WALLET_STATUS.OK;\n    }\n\n    public async signOut(): Promise<WALLET_STATUS> {\n        this._state.accounts = [];\n        this._state.isConnected = false;\n\n        if (!this.provider) {\n            this.provider = this.getProvider();\n            await this.provider.reconnectSession();\n        }\n\n        try {\n            await this.provider?.disconnect();\n        } catch (e) {\n            console.error('Failed to kill session...');\n        }\n\n        this.provider = undefined;\n        this._updateWalletStorageValue();\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n        return WALLET_STATUS.OK;\n    }\n\n    public async getSigner(): Promise<PeraWalletSigner> {\n        return async (transactions: AlgorandSignerTxn): Promise<SignedTx[]> => {\n            this._enforceIsConnected();\n            const peraWallet = this.getProvider();\n\n            if (!peraWallet.connector) {\n                await peraWallet.reconnectSession();\n            }\n\n            const txnsToSign = (transactions as PeraWalletTransaction).map((txn) => ({\n                txn: Buffer.from(txn).toString('base64')\n            }));\n            const jsonRpcRequest = formatJsonRpcRequest('algo_signTxn', [txnsToSign]);\n            const signedTxns = await peraWallet?.connector?.sendCustomRequest(jsonRpcRequest);\n\n            const signedTxns2: SignedTx[] = [];\n            for (let i = 0; i < signedTxns.length; i++) {\n                if (signedTxns[i] !== null) {\n                    signedTxns2.push({\n                        txID: '',\n                        blob: new Uint8Array(Buffer.from(signedTxns[i], 'base64'))\n                    });\n                } else {\n                    signedTxns2.push({\n                        txID: '',\n                        // make linter happy although this was intentional\n                        blob: null as unknown as Uint8Array\n                    });\n                }\n            }\n\n            return signedTxns2;\n        };\n    }\n\n    public async getBalance(): Promise<string> {\n        throw new NotImplementedError();\n    }\n\n    public async getAssets(): Promise<PeraWalletAsset[]> {\n        throw new NotImplementedError();\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return true; // wallet is web only so is always installed\n    }\n\n    public getIsConnected(): boolean {\n        return Boolean(this.getAccounts().length);\n    }\n\n    public getPrimaryAccount(): Accounts {\n        return this._state.accounts[0];\n    }\n\n    public getAccounts(): Accounts[] {\n        return Array.isArray(this._state.accounts) ? this._state.accounts : [];\n    }\n\n    public async fetchCurrentChainID(): Promise<string> {\n        return '0x1';\n    }\n\n    public async mountEventListeners(): Promise<void> {\n        return;\n    }\n\n    public onAccountChange = (cb: (accounts: Accounts[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, () => {\n            return cb(this.getAccounts());\n        });\n    };\n\n    public onAccountDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, () => {\n            return cb();\n        });\n    };\n\n    public onChainChange = (cb: (chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, async () => {\n            const currentChainId = await this.fetchCurrentChainID();\n            return cb(currentChainId);\n        });\n    };\n\n    public onBlockAdded = (_cb: (newBlock: unknown) => void | Promise<void>): HookEvent => {\n        throw new NotImplementedError();\n    };\n\n    public toJSON(): PeraWalletState {\n        return this._state;\n    }\n\n    /**\n     * DANGER - REFRAIN from using in production as can have some unintended side effect. NOT FULLY SUPPORTED!\n     * @param data - New State for wallet\n     */\n    public _dangerouslyUpdateInternalState(data: PeraWalletState) {\n        console.warn(\n            `WARNING - You are about to update the internal state for ${this.name}!! Functionality may not work correctly...`\n        );\n        this._state = data;\n    }\n\n    public getProvider(): PeraWalletConnect {\n        if (this.provider instanceof PeraWalletConnect) {\n            return this.provider;\n        }\n\n        this.provider = new PeraWalletConnect();\n        return this.provider;\n    }\n}\n\nexport { PeraWallet, PeraWalletTransaction };\n","import { SignedTx } from '@randlabs/myalgo-connect';\nimport { Signer as RootSigner } from '~/src/types';\nimport { AlgorandSignerTxn } from '../types';\n\n/**\n * Account information. This object is returned when fetching the primary account\n */\ntype Accounts = {\n    address: string;\n    name: string;\n};\n\n/**\n * State for Pera Wallet\n */\ntype PeraWalletState = {\n    accounts: Accounts[];\n    isConnected: boolean;\n};\n\n/**\n * Signer for Pera Wallet\n */\ntype PeraWalletSigner = RootSigner<AlgorandSignerTxn, SignedTx>;\n\n/**\n * Pera Assets\n */\ntype PeraWalletAsset = {\n    chainId: string;\n    name: string;\n    unit_name: string;\n    id: string;\n    sourceDecimals: number;\n};\n\nexport type { PeraWalletState, PeraWalletSigner, PeraWalletAsset };\n","export * from './WalletConnect';\nexport * from './types';\n","import { formatJsonRpcRequest } from '@json-rpc-tools/utils';\nimport { SignedTx } from '@randlabs/myalgo-connect';\nimport WalletConnectClient from '@walletconnect/client';\nimport QRCodeModal from 'algorand-walletconnect-qrcode-modal';\nimport { NotImplementedError, WalletNotConnectedError } from '~/src/errors';\nimport HookRouter from '~/src/utils/HookRouter/HookRouter';\nimport { HookEvent, WALLET_HOOK, WALLET_ID, WALLET_STATUS } from '~/src/utils/HookRouter/types';\nimport WalletStateStorage from '~/src/WalletStateStorage';\nimport { AlgorandSignerTxn, AlgorandWalletType, CHAIN_ALGORAND } from '..';\nimport { WALLET_TYPE } from '../../config/wallets';\nimport { WalletHookHandlerInterface, WalletInterface } from '../../types';\nimport {\n    AlgorandWalletConnectAsset,\n    AlgorandWalletConnectSigner,\n    AlgorandWalletConnectState,\n    AlgorandWalletConnectTransaction\n} from './types';\n\ntype Accounts = {\n    address: string;\n    name: string;\n};\n\nconst initialState: Readonly<AlgorandWalletConnectState> = Object.freeze({\n    accounts: [],\n    isConnected: false\n});\n\nclass WalletConnect implements WalletInterface<AlgorandWalletConnectState>, WalletHookHandlerInterface {\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.CHAIN_ON_CHANGE\n    ]);\n    private _state: AlgorandWalletConnectState;\n    private provider: WalletConnectClient | undefined;\n    private walletStorage = new WalletStateStorage(CHAIN_ALGORAND, WALLET_ID.ALGORAND_WALLETCONNECT);\n\n    public type: AlgorandWalletType = WALLET_TYPE.ALGORAND_WALLETCONNECT;\n    public name = 'ALGORAND_WALLETCONNECT';\n\n    constructor(state?: AlgorandWalletConnectState) {\n        if (state) {\n            this._state = { ...state };\n        } else {\n            this._state = { ...initialState };\n        }\n\n        this._setupInitialState();\n    }\n\n    private _enforceIsConnected(): void {\n        if (!this.getIsConnected()) {\n            throw new WalletNotConnectedError();\n        }\n    }\n\n    private _setupInitialState() {\n        const storageValue = this.walletStorage.getValue();\n\n        if (storageValue) {\n            this._state = {\n                isConnected: this.getIsConnected(),\n                accounts: storageValue.accounts\n            };\n        }\n    }\n\n    private _updateWalletStorageValue() {\n        if (this._state.isConnected && this._state.accounts.length > 0) {\n            const accounts = this.getAccounts().map((acc) => acc.address);\n            const connectedAccount = this.getPrimaryAccount().address;\n            this.walletStorage.updateValue(true, connectedAccount, accounts);\n        } else {\n            this.walletStorage.updateValue(false, '', []);\n        }\n    }\n\n    public async init(): Promise<WALLET_STATUS> {\n        return WALLET_STATUS.OK;\n    }\n\n    public async signIn(): Promise<WALLET_STATUS> {\n        this.provider = new WalletConnectClient({\n            bridge: 'https://bridge.walletconnect.org', // Required\n            qrcodeModal: QRCodeModal\n        });\n\n        if (!this.provider.connected) {\n            // create new session\n            await this.provider.createSession();\n        } else {\n            const { accounts } = this.provider;\n\n            this._state.isConnected = Array.isArray(accounts) && accounts.length > 0;\n            this._state.accounts = accounts;\n            this._updateWalletStorageValue();\n            this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n        }\n\n        this.provider.on('connect', (error, payload) => {\n            if (error) {\n                throw error;\n            }\n\n            // Get provided accounts\n            const { accounts } = payload.params[0];\n            this._state.isConnected = Array.isArray(accounts) && accounts.length > 0;\n            this._state.accounts = accounts;\n            this._updateWalletStorageValue();\n            this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_CHANGE]);\n        });\n\n        this.provider.on('disconnect', (error, _payload) => {\n            if (error) {\n                throw error;\n            }\n            this.signOut();\n        });\n\n        return WALLET_STATUS.OK;\n    }\n\n    public async signOut(): Promise<WALLET_STATUS> {\n        this._state.accounts = [];\n        this._state.isConnected = false;\n\n        if (!this.provider) {\n            this.getProvider();\n        }\n\n        try {\n            if (this.provider?.connected) {\n                await this.provider?.killSession();\n            }\n        } catch (e) {\n            console.error('Failed to kill session...');\n        }\n        this.provider = undefined;\n        this._updateWalletStorageValue();\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n        return WALLET_STATUS.OK;\n    }\n\n    public async getSigner(): Promise<AlgorandWalletConnectSigner> {\n        return async (transactions: AlgorandSignerTxn): Promise<SignedTx[]> => {\n            this._enforceIsConnected();\n            const walletConnect = this.getProvider();\n            const txnsToSign = (transactions as AlgorandWalletConnectTransaction).map((txn) => ({\n                txn: Buffer.from(txn).toString('base64')\n            }));\n            const jsonRpcRequest = formatJsonRpcRequest('algo_signTxn', [txnsToSign]);\n            const signedTxns = await walletConnect.sendCustomRequest(jsonRpcRequest);\n            const signedTxns2: SignedTx[] = [];\n            for (let i = 0; i < signedTxns.length; i++) {\n                if (signedTxns[i] !== null) {\n                    signedTxns2.push({\n                        txID: '',\n                        blob: new Uint8Array(Buffer.from(signedTxns[i], 'base64'))\n                    });\n                } else {\n                    signedTxns2.push({\n                        txID: '',\n                        blob: null as unknown as Uint8Array\n                    });\n                }\n            }\n\n            return signedTxns2;\n        };\n    }\n\n    public async getBalance(): Promise<string> {\n        throw new NotImplementedError();\n    }\n\n    public async getAssets(): Promise<AlgorandWalletConnectAsset[]> {\n        throw new NotImplementedError();\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return true; // wallet is web only so is always installed\n    }\n\n    public getIsConnected(): boolean {\n        const provider = this.getProvider();\n\n        return provider.connected;\n    }\n\n    public getPrimaryAccount(): Accounts {\n        return {\n            address: this._state.accounts[0],\n            name: ''\n        };\n    }\n\n    public getAccounts(): Accounts[] {\n        return this._state.accounts.map((ob) => ({ address: ob, name: '' }));\n    }\n\n    public async fetchCurrentChainID(): Promise<string> {\n        return '0x1';\n    }\n\n    public async mountEventListeners(): Promise<void> {\n        return;\n    }\n\n    public onAccountChange = (cb: (accounts: Accounts[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, () => {\n            return cb(this.getAccounts());\n        });\n    };\n\n    public onAccountDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, () => {\n            return cb();\n        });\n    };\n\n    public onChainChange = (cb: (chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, async () => {\n            const currentChainId = await this.fetchCurrentChainID();\n            return cb(currentChainId);\n        });\n    };\n\n    public onBlockAdded = (_cb: (newBlock: unknown) => void | Promise<void>): HookEvent => {\n        throw new NotImplementedError();\n    };\n\n    public toJSON(): AlgorandWalletConnectState {\n        return this._state;\n    }\n\n    /**\n     * DANGER - REFRAIN from using in production as can have some unintended side effect. NOT FULLY SUPPORTED!\n     * @param data - New State for wallet\n     */\n    public _dangerouslyUpdateInternalState(data: AlgorandWalletConnectState) {\n        console.warn(\n            `WARNING - You are about to update the internal state for ${this.name}!! Functionality may not work correctly...`\n        );\n        this._state = data;\n    }\n\n    public getProvider(): WalletConnectClient {\n        if (this.provider instanceof WalletConnectClient) {\n            return this.provider;\n        }\n\n        this.provider = new WalletConnectClient({\n            bridge: 'https://bridge.walletconnect.org', // Required\n            qrcodeModal: QRCodeModal\n        });\n        return this.provider;\n    }\n}\n\nexport { WalletConnect };\n","import { SignedTx } from '@randlabs/myalgo-connect';\nimport { Signer as RootSigner } from '~/src/types';\nimport { AlgorandSignerTxn } from '../types';\n\ntype AlgorandWalletConnectState = {\n    accounts: string[];\n    isConnected: boolean;\n};\n\ntype AlgorandWalletConnectSigner = RootSigner<AlgorandSignerTxn, SignedTx>;\n\ntype AlgorandWalletConnectTransaction = Uint8Array[];\n\ntype AlgorandWalletConnectAsset = {\n    chainId: string;\n    name: string;\n    unit_name: string;\n    id: string;\n    sourceDecimals: number;\n};\n\nexport type {\n    AlgorandWalletConnectState,\n    AlgorandWalletConnectSigner,\n    AlgorandWalletConnectTransaction,\n    AlgorandWalletConnectAsset\n};\n","import { WALLET_TYPE } from '../config';\nimport { MyAlgo, MyAlgoTransaction } from './myalgo';\nimport { MyAlgoSigner, MyAlgoState } from './myalgo/types';\nimport { PeraWallet, PeraWalletTransaction } from './perawallet';\nimport { PeraWalletSigner, PeraWalletState } from './perawallet/types';\nimport {\n    AlgorandWalletConnectSigner,\n    AlgorandWalletConnectState,\n    AlgorandWalletConnectTransaction,\n    WalletConnect\n} from './walletconnect';\n\n/**\n * Generic interface for low level wallets\n */\ntype AlgorandWallet = MyAlgo | WalletConnect | PeraWallet;\n\n/**\n * wallet enum to be used as identifier\n */\ntype AlgorandWalletType =\n    | WALLET_TYPE.ALGORAND_MYALGO\n    | WALLET_TYPE.ALGORAND_PERAWALLET\n    | WALLET_TYPE.ALGORAND_WALLETCONNECT;\n\n// TECH DEBT: needs to be removed\ntype AlgorandSignerTxn = MyAlgoTransaction | AlgorandWalletConnectTransaction | PeraWalletTransaction;\n\n/**\n * Signer object passed\n */\ntype AlgorandSigner = MyAlgoSigner | AlgorandWalletConnectSigner | PeraWalletSigner;\n\n/**\n * Internal state of the wallet to be passed using the @see toJSON\n */\ntype AlgorandState = {\n    myAlgo?: MyAlgoState;\n    walletConnect?: AlgorandWalletConnectState;\n    peraWallet?: PeraWalletState;\n};\n\n/**\n * Config used to initialize chain wallet\n */\ntype AlgorandConfig = {\n    hookType: 'all' | 'active' | 'disable';\n    defaultWallet: AlgorandWalletType;\n};\n\nexport { AlgorandWallet };\nexport type { AlgorandWalletType, AlgorandConfig, AlgorandSigner, AlgorandSignerTxn, AlgorandState };\n","export * from './window';\n","const useWindow = <T>(cb: (windowObject: unknown) => T): T | null => {\n    if (Object.keys(globalThis).includes('window')) {\n        return cb(globalThis.window);\n    } else {\n        return null;\n    }\n};\n\nexport { useWindow };\n","import axios from 'axios';\nimport { ethers } from 'ethers';\n\ntype ChainConfig = {\n    chainName: string;\n    chainId: string;\n    nativeCurrency: {\n        name: string;\n        decimals: number;\n        symbol: string;\n    };\n    rpcUrls: string[];\n};\n\nconst mainnetEth: ChainConfig = {\n    chainName: 'Ethereum Mainnet',\n    chainId: '0x1',\n    nativeCurrency: { name: 'ETH', decimals: 18, symbol: 'ETH' },\n    rpcUrls: ['https://rinkeby.etherscan.io']\n};\n\nconst ropstenEth: ChainConfig = {\n    chainName: 'Ropsten Test Network',\n    chainId: '0x3',\n    nativeCurrency: { name: 'RopstenETH', decimals: 18, symbol: 'RopstenETH' },\n    rpcUrls: ['https://ropsten.etherscan.io']\n};\n\nconst rinkebyEth: ChainConfig = {\n    chainName: 'Rinkeby Test Network',\n    chainId: '0x4',\n    nativeCurrency: { name: 'RinkebyETH', decimals: 18, symbol: 'RinkebyETH' },\n    rpcUrls: ['https://rinkeby.etherscan.io']\n};\n\nconst goerliEth: ChainConfig = {\n    chainName: 'Goerli Test Network',\n    chainId: '0x5',\n    nativeCurrency: { name: 'GoerliETH', decimals: 18, symbol: 'GoerliETH' },\n    rpcUrls: ['https://goerli.etherscan.io']\n};\n\nconst kovanEth: ChainConfig = {\n    chainName: 'Kovan Test Network',\n    chainId: '0x2a',\n    nativeCurrency: { name: 'KovanETH', decimals: 18, symbol: 'KovanETH' },\n    rpcUrls: ['https://kovan.etherscan.io']\n};\n\nconst sepoliaEth: ChainConfig = {\n    chainName: 'Sepolia Test Network',\n    chainId: '0xaa36a7',\n    nativeCurrency: { name: 'SepoliaETH', decimals: 18, symbol: 'SepoliaETH' },\n    rpcUrls: ['https://sepolia.etherscan.io']\n};\n\nconst getChainConfig = async (chainId: number): Promise<ChainConfig> => {\n    const { data } = await axios.get('https://chainid.network/chains.json');\n    const item = data.find((datum: any) => datum.networkId === chainId);\n    switch (chainId) {\n        case 1:\n            return mainnetEth;\n        case 3:\n            return ropstenEth;\n        case 4:\n            return rinkebyEth;\n        case 5:\n            return goerliEth;\n        case 42:\n            return kovanEth;\n        case 11155111:\n            return sepoliaEth;\n        default:\n            if (item) {\n                return {\n                    chainName: item.title,\n                    chainId: ethers.utils.hexlify(item.networkId),\n                    nativeCurrency: item.nativeCurrency,\n                    rpcUrls: item.rpc\n                };\n            } else {\n                throw new Error(`ChainId ${chainId} configuration not found`);\n            }\n    }\n};\n\nexport { rinkebyEth, mainnetEth, getChainConfig };\n","import { ethers } from 'ethers';\n\n/**\n * State for Metamask Wallet\n */\ntype MetamaskState = {\n    accounts: string[];\n    isConnected: boolean;\n};\n\n/**\n * Signer for Metamask Wallet\n */\ntype MetamaskSigner = ethers.providers.JsonRpcSigner;\n\n/**\n * Metamask Assets\n */\ntype MetamaskAsset = unknown;\n\n/**\n * Config for Metamask initialization\n */\ntype MetamaskChainConfig = {\n    chainName: string;\n    chainId: string; // does not follow ChainID\n    nativeCurrency: {\n        name: string;\n        decimals: 18;\n        symbol: string;\n    };\n    rpcUrls: string[];\n};\n\nexport type { MetamaskState, MetamaskSigner, MetamaskAsset, MetamaskChainConfig };\n","import { ethers } from 'ethers';\nimport { CHAIN_TYPE, WALLET_TYPE } from '../config/wallets';\nimport { NotImplementedError } from '../errors';\nimport { ChainHookHandlerInterface, ChainWalletInterface, WalletInterface } from '../types';\nimport HookRouter from '../utils/HookRouter';\nimport { WALLET_HOOK, WALLET_STATUS } from '../utils/HookRouter/types';\nimport { Metamask } from './metamask';\nimport { EthereumConfig, EthereumWallet, EthereumState, EthereumSigner, EthereumWalletType } from './types';\nimport { EthWalletConnect } from './walletconnect';\n\n/**\n * Default config\n */\nconst defaultEthereumConfig: EthereumConfig = {\n    hookType: 'active',\n    defaultWallet: WALLET_TYPE.ETHEREUM_METAMASK\n};\n\n/***\n * Ethereum Chain Wallet used to manage ethereum wallets and invoke ethereum transactions\n */\nclass Ethereum\n    implements\n        WalletInterface<unknown>,\n        ChainHookHandlerInterface<EthereumWalletType>,\n        ChainWalletInterface<EthereumWallet, EthereumWalletType>\n{\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.CHAIN_ON_CHANGE,\n        WALLET_HOOK.CHAIN_ON_DISCONNECT,\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.NEW_BLOCK\n    ]);\n\n    private _metaMask: Metamask;\n    private _walletConnect: EthWalletConnect;\n    private _initialized = false;\n    private _activeWallets: EthereumWalletType[] = [];\n    private _config: EthereumConfig;\n\n    public type: CHAIN_TYPE = CHAIN_TYPE.ETHEREUM;\n    public name = 'ETHEREUM';\n\n    /**\n     * Constructor for Ethereum\n     * @param config - Partial Ethereum Config to be overwritten with defaults\n     * @param data - Ethereum Data to initialize with\n     */\n    constructor(config: Partial<EthereumConfig>, data?: EthereumState) {\n        this._metaMask = new Metamask(data?.metaMask);\n        this._walletConnect = new EthWalletConnect(data?.walletConnect);\n        this._config = { ...defaultEthereumConfig, ...config };\n    }\n\n    /**\n     * Mount internal hooks that make managing active wallet possible\n     * @param wallet - wallet type\n     */\n    private _mountInternalHooks = (wallet: EthereumWallet) => {\n        const verifyWallet = (walletType: EthereumWalletType) => {\n            switch (this._config.hookType) {\n                case 'active':\n                    return this._activeWallets[0] === walletType;\n                case 'all':\n                    return true;\n                default:\n                    return false;\n            }\n        };\n\n        const hook =\n            (hookType: WALLET_HOOK) =>\n            (...args: unknown[]) => {\n                if (!verifyWallet(wallet.type)) {\n                    return;\n                }\n\n                this.hookRouter.applyHookWithArgs(hookType, ...[wallet.type, ...args]);\n            };\n\n        const onAccountChange = (accounts: string[]) => {\n            if (accounts.length < 1) {\n                this._deregisterActiveWallet(wallet.type);\n            } else {\n                this._registerActiveWallet(wallet.type);\n            }\n        };\n\n        const onAccountDisconnect = () => {\n            this._deregisterActiveWallet(wallet.type);\n        };\n\n        wallet.onAccountChange(hook(WALLET_HOOK.ACCOUNT_ON_CHANGE));\n        wallet.onAccountDisconnect(hook(WALLET_HOOK.ACCOUNT_ON_DISCONNECT));\n        wallet.onChainChange(hook(WALLET_HOOK.CHAIN_ON_CHANGE));\n        wallet.onChainDisconnect(hook(WALLET_HOOK.CHAIN_ON_DISCONNECT));\n\n        wallet.onAccountChange(onAccountChange);\n        wallet.onAccountDisconnect(onAccountDisconnect);\n\n        // onBlockAdded is a chain and not a wallet specific event\n        // so wallet type is not required\n        if (wallet.type === this._config.defaultWallet) {\n            wallet.onBlockAdded((newBlock: number) => {\n                this.hookRouter.applyHookWithArgs(WALLET_HOOK.NEW_BLOCK, [newBlock]);\n            });\n        }\n    };\n\n    /**\n     * Register a wallet as active\n     * @param type - Wallet type\n     */\n    private _registerActiveWallet = (type: EthereumWalletType) => {\n        this._activeWallets.unshift(type);\n    };\n\n    /**\n     * Deregister a new wallet from active\n     * @param type - Wallet type\n     */\n    private _deregisterActiveWallet = (type: EthereumWalletType) => {\n        const index = this._activeWallets.indexOf(type);\n        this._activeWallets = this._activeWallets.splice(index, 1);\n    };\n\n    /**\n     * Internally initialize wallet\n     * @param algoWallet - wallet\n     */\n    private _initEthereumWallet = async (wallet: EthereumWallet) => {\n        if (wallet.getIsWalletInstalled()) {\n            await wallet.init();\n            await wallet.mountEventListeners();\n            await this._mountInternalHooks(wallet);\n        } else {\n            console.warn(`${wallet.name} is not currently installed...`);\n        }\n    };\n\n    /**\n     * Initializes the chain wallet\n     * @returns wallet status\n     * @remarks Should be called separately from constructor\n     */\n    public async init(): Promise<WALLET_STATUS> {\n        if (this._initialized) {\n            return WALLET_STATUS.OK;\n        }\n\n        await Promise.all([this._metaMask, this._walletConnect].map(this._initEthereumWallet));\n\n        this._initialized = true;\n        return WALLET_STATUS.OK;\n    }\n\n    public getWallet(type: EthereumWalletType): EthereumWallet {\n        switch (type) {\n            case WALLET_TYPE.ETHEREUM_WALLETCONNECT:\n                return this._walletConnect;\n            case WALLET_TYPE.ETHEREUM_METAMASK:\n                return this._metaMask;\n            default:\n                throw new Error(`Wallet type ${type} cannot be found`);\n        }\n    }\n\n    public getAvailableWallets(): EthereumWalletType[] {\n        const walletTypes: EthereumWalletType[] = [WALLET_TYPE.ETHEREUM_METAMASK, WALLET_TYPE.ETHEREUM_WALLETCONNECT];\n\n        return walletTypes.filter((walletType) => this.getWallet(walletType).getIsWalletInstalled());\n    }\n\n    public getConnectedWallets(): EthereumWalletType[] {\n        const walletTypes: EthereumWalletType[] = [WALLET_TYPE.ETHEREUM_METAMASK, WALLET_TYPE.ETHEREUM_WALLETCONNECT];\n\n        return walletTypes.filter((walletType) => this.getWallet(walletType).getIsConnected());\n    }\n\n    public getActiveWallet(): EthereumWallet {\n        if (this._activeWallets.length === 0) {\n            return this.getWallet(this._config.defaultWallet); // Get default wallet\n        }\n        return this.getWallet(this._activeWallets[0]);\n    }\n\n    public updateActiveWallet(type: EthereumWalletType): EthereumWallet {\n        this._registerActiveWallet(type);\n        return this.getWallet(type);\n    }\n\n    public signIn(): Promise<WALLET_STATUS> {\n        return this.getActiveWallet().signIn();\n    }\n\n    public signOut(): Promise<WALLET_STATUS> {\n        return this.getActiveWallet().signOut();\n    }\n\n    public getSigner(): Promise<EthereumSigner> {\n        return this.getActiveWallet().getSigner();\n    }\n\n    public getBalance(): Promise<string> {\n        return this.getActiveWallet().getBalance();\n    }\n\n    public getProvider(): Promise<ethers.providers.Web3Provider> {\n        return this.getActiveWallet().getProvider();\n    }\n\n    public getIsConnected(): boolean {\n        return this.getActiveWallet().getIsConnected();\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return this.getActiveWallet().getIsWalletInstalled();\n    }\n\n    public getPrimaryAccount(): string {\n        return this.getActiveWallet().getPrimaryAccount();\n    }\n\n    public getAccounts(): string[] {\n        return this.getActiveWallet().getAccounts();\n    }\n\n    public fetchCurrentChainID(): Promise<string> {\n        return this.getActiveWallet().fetchCurrentChainID();\n    }\n\n    public mountEventListeners(): Promise<void> {\n        throw new NotImplementedError();\n    }\n\n    public onAccountChange = (cb: (walletType: EthereumWalletType, accounts: string[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n    };\n\n    public onChainChange = (cb: (walletType: EthereumWalletType, chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n    };\n\n    public onAccountDisconnect = (cb: (walletType: EthereumWalletType) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, cb);\n    };\n\n    public onBlockAdded = (cb: (newBlock: number) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.NEW_BLOCK, (block: number) => {\n            return cb(block);\n        });\n    };\n\n    public toJSON(): unknown {\n        throw new NotImplementedError();\n    }\n}\n\nexport { Ethereum, defaultEthereumConfig };\n","export * from './WalletConnect';\nexport * from './types';\n","import WalletConnectProvider from '@walletconnect/web3-provider';\nimport axios from 'axios';\nimport { ethers, providers } from 'ethers';\nimport { NotImplementedError, WalletNotConnectedError } from '~/src/errors';\nimport HookRouter from '~/src/utils/HookRouter/HookRouter';\nimport { WALLET_HOOK, WALLET_ID, WALLET_STATUS } from '~/src/utils/HookRouter/types';\nimport WalletStateStorage from '~/src/WalletStateStorage';\nimport { CHAIN_ETHEREUM, EthereumWalletType } from '..';\nimport { WALLET_TYPE } from '../../config/wallets';\nimport { EVMBasedChain, WalletHookHandlerInterface, WalletInterface } from '../../types';\nimport { getChainConfig } from '../chains';\nimport { EthereumWalletConnectAsset, EthereumWalletConnectChainConfig, EthereumWalletConnectState } from './types';\n\nconst initialState: Readonly<EthereumWalletConnectState> = Object.freeze({\n    accounts: [],\n    isConnected: false\n});\n\nclass EthWalletConnect implements WalletInterface<EthereumWalletConnectState>, WalletHookHandlerInterface {\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.CHAIN_ON_CHANGE,\n        WALLET_HOOK.CHAIN_ON_DISCONNECT,\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.NEW_BLOCK\n    ]);\n    private chain: string | null = null;\n    private _state: EthereumWalletConnectState;\n    public provider?: ethers.providers.Web3Provider;\n    private walletStorage = new WalletStateStorage(CHAIN_ETHEREUM, WALLET_ID.ETHEREUM_WALLETCONNECT);\n    public type: EthereumWalletType = WALLET_TYPE.ETHEREUM_WALLETCONNECT;\n    public name = 'ETHEREUM_WALLETCONNECT';\n\n    constructor(state?: EthereumWalletConnectState) {\n        if (state) {\n            this._state = { ...state };\n        } else {\n            this._state = { ...initialState };\n        }\n        this._setupInitialState();\n    }\n\n    private _setupInitialState() {\n        const storageValue = this.walletStorage.getValue();\n\n        if (storageValue) {\n            this._state = {\n                isConnected: storageValue.isConnected,\n                accounts: storageValue.accounts\n            };\n        }\n    }\n\n    private _updateWalletStorageValue() {\n        if (this._state.isConnected && this._state.accounts.length > 0) {\n            this.walletStorage.updateValue(true, this._state.accounts[0], this._state.accounts);\n        } else {\n            this.walletStorage.updateValue(false, '', []);\n        }\n    }\n\n    private async _getProvider(qrcode = false): Promise<ethers.providers.Web3Provider> {\n        const provider = await this.getWCProvider(qrcode);\n        return new providers.Web3Provider(provider);\n    }\n\n    private _enforceIsConnected(): void {\n        if (!this.getIsConnected()) {\n            throw new WalletNotConnectedError();\n        }\n    }\n\n    private async _enforceChain(): Promise<void> {\n        if (this.chain === null) return;\n\n        const provider = await this._getProvider();\n        const currentChain: string = await provider.send('eth_chainId', []);\n\n        if (currentChain !== this.chain) {\n            throw new Error(`Chain has changed to ${currentChain} when it should be ${this.chain}`);\n        }\n    }\n\n    public async getWCProvider(qrcode = false): Promise<WalletConnectProvider> {\n        const { data: chains }: { data: EVMBasedChain[] } = await axios.get('https://chainid.network/chains.json');\n        const ignoredChainIds = [1, 3, 4, 5, 42, 11155111];\n        const filteredChains = chains.filter((chain: EVMBasedChain) => {\n            return !ignoredChainIds.includes(chain.networkId);\n        });\n\n        const rpc: { [key: string]: string } = {\n            1: 'https://rpc.ankr.com/eth',\n            3: 'https://rpc.ankr.com/eth_ropsten',\n            4: 'https://rpc.ankr.com/eth_rinkeby',\n            5: 'https://rpc.ankr.com/eth_goerli',\n            42: 'https://kovan.etherscan.io',\n            11155111: 'https://sepolia.etherscan.io'\n        };\n\n        if (filteredChains && filteredChains.length) {\n            filteredChains.forEach((chain: EVMBasedChain) => {\n                rpc[chain.networkId] = chain.rpc[0];\n            });\n        }\n\n        const provider = new WalletConnectProvider({\n            rpc,\n            qrcode\n        });\n\n        await provider.enable();\n\n        provider.on('accountsChanged', async (accounts: string[]) => {\n            this._state.accounts = accounts;\n\n            if (accounts.length === 0) {\n                await this.signOut();\n                this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n            } else {\n                this.hookRouter.applyHookWithArgs(WALLET_HOOK.ACCOUNT_ON_CHANGE, accounts);\n            }\n            this._updateWalletStorageValue();\n        });\n\n        provider.on('chainChanged', async (chainId: number) => {\n            const id = ethers.utils.hexValue(chainId);\n            this.hookRouter.applyHookWithArgs(WALLET_HOOK.CHAIN_ON_CHANGE, id);\n        });\n\n        provider.on('disconnect', async (_code: number, _reason: string) => {\n            this._state.accounts = [];\n            this._state.isConnected = false;\n            this.provider = undefined;\n            this._updateWalletStorageValue();\n            this.hookRouter.applyHooks([WALLET_HOOK.CHAIN_ON_DISCONNECT]);\n            this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n        });\n\n        return provider;\n    }\n\n    public async init(): Promise<WALLET_STATUS> {\n        return WALLET_STATUS.OK;\n    }\n\n    public async signIn(): Promise<WALLET_STATUS> {\n        const provider = await this._getProvider(true);\n        this._state.accounts = await provider.listAccounts();\n        this._state.isConnected = this._state.accounts.length > 0;\n        this._updateWalletStorageValue();\n        this.hookRouter.applyHookWithArgs(WALLET_HOOK.ACCOUNT_ON_CHANGE, this._state.accounts);\n        return WALLET_STATUS.OK;\n    }\n\n    public async signOut(): Promise<WALLET_STATUS> {\n        this._enforceIsConnected();\n        this._state.accounts = [];\n        this._state.isConnected = false;\n        this.provider = undefined;\n        this._updateWalletStorageValue();\n        (await this.getWCProvider()).disconnect();\n\n        this.hookRouter.applyHooks([WALLET_HOOK.ACCOUNT_ON_DISCONNECT]);\n        return WALLET_STATUS.OK;\n    }\n\n    public async getSigner(): Promise<ethers.providers.JsonRpcSigner> {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        const provider = this.provider || (await this._getProvider());\n\n        return provider.getSigner();\n    }\n\n    public async getBalance(): Promise<string> {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        const provider = await this._getProvider();\n        const balance = await provider.getBalance(this._state.accounts[0]);\n        return balance.toString();\n    }\n\n    public async getAssets(): Promise<EthereumWalletConnectAsset[]> {\n        throw new NotImplementedError();\n    }\n\n    public getIsConnected(): boolean {\n        return this._state.isConnected;\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return true;\n    }\n\n    public getPrimaryAccount(): string {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        return this._state.accounts[0];\n    }\n\n    public getAccounts(): string[] {\n        this._enforceChain();\n        this._enforceIsConnected();\n\n        return this._state.accounts;\n    }\n\n    public async fetchCurrentChainID(): Promise<string> {\n        const provider: ethers.providers.Web3Provider = await this._getProvider();\n        const chainId = await provider.send('eth_chainId', []);\n\n        return chainId;\n    }\n\n    public async addChainToWallet(chainConfig: EthereumWalletConnectChainConfig): Promise<void> {\n        const provider: any = await this._getProvider();\n        await provider.provider.request({\n            method: 'wallet_addEthereumChain',\n            params: [chainConfig]\n        });\n    }\n\n    public async switchChainFromWallet(chain: number) {\n        const provider: any = await this._getProvider();\n        const defaultChains = [1, 3, 4, 5, 42];\n\n        if (defaultChains.includes(chain)) {\n            await provider.provider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: `0x${chain.toString(16)}` }]\n            });\n        } else {\n            const chainConfig = await getChainConfig(chain);\n            await this.addChainToWallet(chainConfig as EthereumWalletConnectChainConfig);\n        }\n    }\n\n    public async forceCurrentChainID(chain: number): Promise<void> {\n        if (this.chain !== null && this.chain !== `0x${chain}`) {\n            throw new Error(`Cannot force chain to be 0x${chain} because it is already forced to be 0x${this.chain}`);\n        }\n\n        this.chain = `0x${chain}`;\n        this.switchChainFromWallet(chain);\n    }\n\n    public onAccountChange = (cb: (accounts: string[]) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n    };\n\n    public onChainChange = (cb: (chain: string) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n    };\n\n    public onAccountDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, cb);\n    };\n\n    public onChainDisconnect = (cb: () => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_DISCONNECT, cb);\n    };\n\n    public onBlockAdded = (cb: (newBlock: number) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.NEW_BLOCK, (block: number) => {\n            return cb(block);\n        });\n    };\n\n    public toJSON(): EthereumWalletConnectState {\n        return this._state;\n    }\n\n    public async mountEventListeners() {\n        return;\n    }\n\n    public async unmountEventListeners() {\n        return;\n    }\n\n    public async getProvider(): Promise<ethers.providers.Web3Provider> {\n        await this._enforceChain();\n        return await this._getProvider();\n    }\n}\n\nexport { EthWalletConnect };\n","import { Signer as RootSigner } from '~/src/types';\nimport { TransactionRequest, TransactionResponse } from '@ethersproject/abstract-provider';\n\n/**\n * State for EthereumWalletConnect Wallet\n */\ntype EthereumWalletConnectState = {\n    accounts: string[];\n    isConnected: boolean;\n};\n\n/**\n * Signer for EthereumWalletConnect Wallet\n */\ntype EthereumWalletConnectSigner = RootSigner<TransactionRequest, TransactionResponse>;\n\n/**\n * EthereumWalletConnect Assets\n */\ntype EthereumWalletConnectAsset = unknown;\n\n/**\n * Config for EthereumWalletConnect initialization\n */\ntype EthereumWalletConnectChainConfig = {\n    chainName: string;\n    chainId: string; // does not follow ChainID\n    nativeCurrency: {\n        name: string;\n        decimals: 18;\n        symbol: string;\n    };\n    rpcUrls: string[];\n};\n\nexport type {\n    EthereumWalletConnectState,\n    EthereumWalletConnectSigner,\n    EthereumWalletConnectAsset,\n    EthereumWalletConnectChainConfig\n};\n","import { WALLET_TYPE } from '../config';\nimport { Metamask } from './metamask';\nimport { MetamaskSigner, MetamaskState } from './metamask/types';\nimport { EthereumWalletConnectState, EthWalletConnect } from './walletconnect';\n\n/**\n * Generic interface for low level wallets\n */\ntype EthereumWallet = Metamask | EthWalletConnect;\n\n/**\n * wallet enum to be used as identifier\n */\ntype EthereumWalletType = WALLET_TYPE.ETHEREUM_METAMASK | WALLET_TYPE.ETHEREUM_WALLETCONNECT;\n\n/**\n * Signer object passed\n */\ntype EthereumSigner = MetamaskSigner;\n\n/**\n * Internal state of the wallet to be passed using the @see toJSON\n */\ntype EthereumState = {\n    metaMask?: MetamaskState;\n    walletConnect?: EthereumWalletConnectState;\n    activeWallets: EthereumWalletType[];\n};\n\n/**\n * Config used to initialize chain wallet\n */\ntype EthereumConfig = {\n    hookType: 'all' | 'active' | 'disable';\n    defaultWallet: EthereumWalletType;\n};\n\nexport type { EthereumWalletType, EthereumConfig, EthereumSigner, EthereumState, EthereumWallet };\n","export * from './wallets';\n","import { Accounts } from '@randlabs/myalgo-connect';\nimport {\n    Algorand,\n    AlgorandConfig,\n    AlgorandSigner,\n    AlgorandState,\n    AlgorandWalletType,\n    defaultAlgorandConfig\n} from './algorand';\nimport { CHAIN_TYPE, WALLET_TYPE } from './config';\nimport { NotImplementedError } from './errors';\nimport {\n    defaultEthereumConfig,\n    Ethereum,\n    EthereumConfig,\n    EthereumSigner,\n    EthereumState,\n    EthereumWalletType\n} from './ethereum';\nimport { ChainWallet, Wallet, WalletInterface } from './types';\nimport HookRouter from './utils/HookRouter';\nimport { WALLET_HOOK, WALLET_STATUS } from './utils/HookRouter/types';\n\n/**\n * wallet enum to be used as identifier\n * @remarks superset of all wallet types\n */\ntype SuperWalletType = AlgorandWalletType | EthereumWalletType;\n\n/**\n * Signer object passed\n */\ntype SuperWalletSigner = AlgorandSigner | EthereumSigner;\n\n/**\n * Internal state of the wallet to be passed using the @see toJSON\n * Superset of all wallet states\n */\ntype SuperWalletState = {\n    algorand: AlgorandState;\n    ethereum: EthereumState;\n};\n\n/**\n * Chain Config represents the config/data to initialize all wallets\n * @remarks Superset of all wallet states\n */\ntype ChainConfig =\n    | {\n          type: CHAIN_TYPE.ALGORAND;\n          config: AlgorandConfig;\n          data: Partial<AlgorandState>;\n      }\n    | {\n          type: CHAIN_TYPE.ETHEREUM;\n          config: EthereumConfig;\n      };\n\n/**\n * Config to initialize Super Wallet. Contains list of @see ChainConfig to initialize all wallets\n */\ntype SuperWalletConfig = {\n    defaultChain: CHAIN_TYPE;\n    chains: ChainConfig[];\n};\n\n/**\n * Super Wallet Class. One Wallet to rule them all\n * Manages Chain + Wallet and allows you to seamlessly switch between using one interface\n */\nclass SuperWallet implements WalletInterface<unknown> {\n    private hookRouter: HookRouter = new HookRouter([\n        WALLET_HOOK.CHAIN_ON_CHANGE,\n        WALLET_HOOK.CHAIN_ON_DISCONNECT,\n        WALLET_HOOK.ACCOUNT_ON_CHANGE,\n        WALLET_HOOK.ACCOUNT_ON_DISCONNECT,\n        WALLET_HOOK.NEW_BLOCK\n    ]);\n\n    private _algorand: Algorand;\n    private _ethereum: Ethereum;\n    private _initialized = false;\n    private _activeChain: CHAIN_TYPE[] = [];\n    private _config: SuperWalletConfig;\n\n    constructor(config: SuperWalletConfig, data?: SuperWalletState) {\n        this._config = config;\n\n        let algorandConfig: AlgorandConfig = defaultAlgorandConfig;\n        let ethereumConfig: EthereumConfig = defaultEthereumConfig;\n\n        const algorandState: AlgorandState | undefined = data?.algorand;\n        const ethereumState: EthereumState | undefined = data?.ethereum;\n\n        this._config.chains.map((chain) => {\n            if (chain.type === CHAIN_TYPE.ALGORAND) {\n                algorandConfig = { ...algorandConfig, ...chain.config };\n            }\n\n            if (chain.type === CHAIN_TYPE.ETHEREUM) {\n                ethereumConfig = { ...ethereumConfig, ...chain.config };\n            }\n        });\n\n        this._algorand = new Algorand(algorandConfig, algorandState);\n        this._ethereum = new Ethereum(ethereumConfig, ethereumState);\n    }\n\n    /**\n     * Register a wallet as active\n     * @param type - Wallet type\n     */\n    private _registerActiveChain = (type: CHAIN_TYPE): void => {\n        this._activeChain.unshift(type);\n    };\n\n    /**\n     * Deregister a new wallet from active\n     * @param type - Wallet type\n     */\n    private _deregisterActiveChain = (type: CHAIN_TYPE): void => {\n        this._activeChain = this._activeChain.filter((elem) => elem !== type);\n    };\n\n    /**\n     * Mount internal hooks that make managing active wallet possible\n     * @param wallet - wallet type\n     */\n    private _mountInternalHooks = (chain: ChainWallet) => {\n        const hook =\n            (hookType: WALLET_HOOK) =>\n            (...args: unknown[]) => {\n                this.hookRouter.applyHookWithArgs(hookType, ...[chain, ...args]);\n            };\n\n        const onAccountChange = (accounts: unknown[]) => {\n            if (accounts.length < 1) {\n                this._deregisterActiveChain(chain.type);\n            } else {\n                this._registerActiveChain(chain.type);\n            }\n        };\n\n        const onAccountDisconnect = () => {\n            this._deregisterActiveChain(chain.type);\n        };\n\n        chain.onAccountChange(hook(WALLET_HOOK.ACCOUNT_ON_CHANGE));\n        chain.onAccountDisconnect(hook(WALLET_HOOK.ACCOUNT_ON_DISCONNECT));\n        chain.onChainChange(hook(WALLET_HOOK.CHAIN_ON_CHANGE));\n\n        chain.onAccountChange((_wallet: unknown, accounts: unknown[]) => onAccountChange(accounts));\n        chain.onAccountDisconnect((_wallet: unknown) => onAccountDisconnect());\n    };\n\n    /**\n     * Initializes the chain wallet\n     * @param chain - chain to initialize\n     */\n    private _initSuperWalletChain = async (chain: ChainWallet): Promise<void> => {\n        await chain.init();\n        await this._mountInternalHooks(chain);\n    };\n\n    /**\n     * higher level function that wraps around functions\n     * that take a chain as an argument and applies function to all chains\n     * @param method - function to invoke\n     * @returns function return value\n     */\n    private _applyAllChains = <T>(method: (chainType: CHAIN_TYPE) => T[]): T[] => {\n        const CHAIN_TYPES: CHAIN_TYPE[] = [CHAIN_TYPE.ALGORAND, CHAIN_TYPE.ETHEREUM];\n\n        let result: T[] = [];\n\n        CHAIN_TYPES.forEach((chainType) => {\n            result = [...result, ...method(chainType)];\n        });\n\n        return result;\n    };\n\n    /**\n     * Initializes the chain wallet\n     * @returns wallet status\n     * @remarks Should be called separately from constructor\n     */\n    public async init(): Promise<WALLET_STATUS> {\n        if (this._initialized) {\n            return WALLET_STATUS.OK;\n        }\n\n        this._initialized = true;\n        await Promise.all([this._algorand, this._ethereum].map(this._initSuperWalletChain));\n\n        return WALLET_STATUS.OK;\n    }\n\n    /**\n     * Get Chain\n     * @param type - chain type\n     * @returns chain interface\n     */\n    public getChain(type: CHAIN_TYPE): ChainWallet {\n        switch (type) {\n            case CHAIN_TYPE.ALGORAND:\n                return this._algorand;\n            case CHAIN_TYPE.ETHEREUM:\n                return this._ethereum;\n            default:\n                throw new Error(`Chain type ${type} cannot be found`);\n        }\n    }\n\n    /**\n     * Get wallet from chain\n     * @param chainType - chain type\n     * @param walletType - wallet type\n     * @returns specific wallet\n     */\n    public getWallet(chainType: CHAIN_TYPE, walletType: WALLET_TYPE): Wallet {\n        const chain = this.getChain(chainType);\n\n        if (chain instanceof Algorand) {\n            return chain.getWallet(walletType as AlgorandWalletType);\n        }\n        return chain.getWallet(walletType as EthereumWalletType);\n    }\n\n    /**\n     * Get all available wallet from chain\n     * @param chainType - chain type\n     * @returns all available wallets on chain\n     */\n    public getAvailableWalletsOnChain(chainType: CHAIN_TYPE): SuperWalletType[] {\n        if (chainType === CHAIN_TYPE.ALGORAND) {\n            return this._algorand.getAvailableWallets();\n        }\n        return this._ethereum.getAvailableWallets();\n    }\n\n    /**\n     * Get all available wallet\n     * @returns all available wallets on any chain\n     */\n    public getAvailableWallets(): SuperWalletType[] {\n        return this._applyAllChains(this.getAvailableWalletsOnChain);\n    }\n\n    /**\n     * Get all connected wallet from chain\n     * @param chainType - chain type\n     * @returns all connected wallets on chain\n     */\n    public getConnectedWalletsOnChain(chainType: CHAIN_TYPE): SuperWalletType[] {\n        if (chainType === CHAIN_TYPE.ALGORAND) {\n            return this._algorand.getConnectedWallets();\n        }\n        return this._ethereum.getConnectedWallets();\n    }\n\n    /**\n     * Get all available wallet\n     * @returns all connected wallets on any chain\n     */\n    public getConnectedWallets(): SuperWalletType[] {\n        return this._applyAllChains(this.getConnectedWalletsOnChain);\n    }\n\n    /**\n     * Get active wallet from chain\n     * @param chainType - chain type\n     * @returns active wallet on chain\n     */\n    public getActiveChain(): ChainWallet {\n        if (this._activeChain.length === 0) {\n            return this.getChain(this._config.defaultChain); // Get default wallet\n        }\n        return this.getChain(this._activeChain[0]);\n    }\n\n    /**\n     * Get all active wallets on any chain\n     * @returns all active wallets on any chain\n     */\n    public getActiveWalletOnChain(chainType: CHAIN_TYPE): Wallet {\n        if (chainType === CHAIN_TYPE.ALGORAND) {\n            return this._algorand.getActiveWallet();\n        }\n        return this._ethereum.getActiveWallet();\n    }\n\n    /**\n     * Get the last used wallet on the last used chain\n     * @returns the last used wallet on the last used chain\n     */\n    public getActiveWallet(): Wallet {\n        const chain = this.getActiveChain();\n        return chain.getActiveWallet();\n    }\n\n    /**\n     * Update the active chain with chain\n     * @param chainType - chain to become active\n     * @returns the chain wallet\n     */\n    public updateActiveChain(chainType: CHAIN_TYPE): ChainWallet {\n        this._registerActiveChain(chainType);\n        return this.getChain(chainType);\n    }\n\n    /**\n     * Update the active wallet on chain\n     * @param chainType - chain to select wallet\n     * @param walletType - wallet to become active on chain\n     * @returns the active wallet\n     */\n    public updateActiveWalletOnChain(chainType: CHAIN_TYPE, walletType: WALLET_TYPE): Wallet {\n        const chain = this.getChain(chainType);\n        if (chain instanceof Algorand) {\n            return chain.updateActiveWallet(walletType as AlgorandWalletType);\n        }\n        return chain.updateActiveWallet(walletType as EthereumWalletType);\n    }\n\n    public signIn(): Promise<WALLET_STATUS> {\n        return this.getActiveWallet().signIn();\n    }\n\n    public signOut(): Promise<WALLET_STATUS> {\n        return this.getActiveWallet().signOut();\n    }\n\n    public getSigner(): Promise<SuperWalletSigner> {\n        return this.getActiveWallet().getSigner();\n    }\n\n    public getBalance(): Promise<string> {\n        return this.getActiveWallet().getBalance();\n    }\n\n    public getAssets(): Promise<unknown[]> {\n        return this.getActiveWallet().getAssets();\n    }\n\n    public getProvider(): unknown {\n        return this.getActiveWallet().getProvider();\n    }\n\n    public getIsConnected(): boolean {\n        return this.getActiveWallet().getIsConnected();\n    }\n\n    public getIsWalletInstalled(): boolean {\n        return this.getActiveWallet().getIsWalletInstalled();\n    }\n\n    public getPrimaryAccount(): unknown {\n        return this.getActiveWallet().getPrimaryAccount();\n    }\n\n    public getAccounts(): unknown[] {\n        return this.getActiveWallet().getAccounts();\n    }\n\n    public fetchCurrentChainID(): Promise<string> {\n        return this.getActiveWallet().fetchCurrentChainID();\n    }\n\n    public mountEventListeners(): Promise<void> {\n        throw new NotImplementedError();\n    }\n\n    public onAccountChange = (\n        cb: (chainType: CHAIN_TYPE, walletType: Wallet, accounts: Accounts[]) => void | Promise<void>\n    ) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_CHANGE, cb);\n    };\n\n    public onChainChange = (\n        cb: (chainType: CHAIN_TYPE, walletType: CHAIN_TYPE, chain: string) => void | Promise<void>\n    ) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.CHAIN_ON_CHANGE, cb);\n    };\n\n    public onAccountDisconnect = (cb: (chainType: CHAIN_TYPE, walletType: CHAIN_TYPE) => void | Promise<void>) => {\n        return this.hookRouter.registerCallback(WALLET_HOOK.ACCOUNT_ON_DISCONNECT, cb);\n    };\n\n    public onBlockAdded = (_cb: (chainType: CHAIN_TYPE, newBlock: number) => void | Promise<void>) => {\n        throw new NotImplementedError();\n    };\n\n    public toJSON(): unknown {\n        throw new NotImplementedError();\n    }\n}\n\nexport { SuperWallet, SuperWalletType, SuperWalletState, SuperWalletConfig, ChainConfig };\nexport type { SuperWalletSigner };\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}